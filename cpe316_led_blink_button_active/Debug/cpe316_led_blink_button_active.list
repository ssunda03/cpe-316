
cpe316_led_blink_button_active.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000210  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  08000398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  08000398  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003a0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003a4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000163b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000499  00000000  00000000  000216b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00021b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000168  00000000  00000000  00021d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f86  00000000  00000000  00021eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002250  00000000  00000000  00045e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1877  00000000  00000000  0004808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000648  00000000  00000000  00129908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00129f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000380 	.word	0x08000380

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000380 	.word	0x08000380

080001c8 <main>:
#include "main.h"

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	// turns on clock to GPIO banks A and C
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOCEN);
 80001cc:	4b1b      	ldr	r3, [pc, #108]	; (800023c <main+0x74>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d0:	4a1a      	ldr	r2, [pc, #104]	; (800023c <main+0x74>)
 80001d2:	f043 0305 	orr.w	r3, r3, #5
 80001d6:	64d3      	str	r3, [r2, #76]	; 0x4c

  // bank A as GPIO mode
  GPIOA->MODER &= ~(GPIO_MODER_MODE5);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001e6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODE5_0);
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f6:	6013      	str	r3, [r2, #0]

  // bank C as GPIO mode
  GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 80001f8:	4b11      	ldr	r3, [pc, #68]	; (8000240 <main+0x78>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a10      	ldr	r2, [pc, #64]	; (8000240 <main+0x78>)
 80001fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000202:	6013      	str	r3, [r2, #0]
  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13);
 8000204:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <main+0x78>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <main+0x78>)
 800020a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800020e:	60d3      	str	r3, [r2, #12]
	  }
	  else {
		  GPIOA->ODR |= GPIO_PIN_5;
	  }*/
	  // if BUTTON not pressed (high), clear LED, else set LED
	  GPIOA->ODR = GPIOC->IDR & GPIO_PIN_13 ? GPIOA->ODR & ~GPIO_PIN_5 : GPIOA->ODR | GPIO_PIN_5;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <main+0x78>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000218:	2b00      	cmp	r3, #0
 800021a:	d005      	beq.n	8000228 <main+0x60>
 800021c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f023 0320 	bic.w	r3, r3, #32
 8000226:	e004      	b.n	8000232 <main+0x6a>
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f043 0320 	orr.w	r3, r3, #32
 8000232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000236:	6153      	str	r3, [r2, #20]
 8000238:	e7ea      	b.n	8000210 <main+0x48>
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000
 8000240:	48000800 	.word	0x48000800

08000244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000248:	e7fe      	b.n	8000248 <NMI_Handler+0x4>

0800024a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800024e:	e7fe      	b.n	800024e <HardFault_Handler+0x4>

08000250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000254:	e7fe      	b.n	8000254 <MemManage_Handler+0x4>

08000256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800025a:	e7fe      	b.n	800025a <BusFault_Handler+0x4>

0800025c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>

08000262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000290:	f000 f83e 	bl	8000310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <SystemInit+0x20>)
 800029e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x20>)
 80002a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80002bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002c0:	f7ff ffea 	bl	8000298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ea:	f000 f825 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002ee:	f7ff ff6b 	bl	80001c8 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80002f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000300:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 8000304:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000308:	20000024 	.word	0x20000024

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x20>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <HAL_IncTick+0x24>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4413      	add	r3, r2
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <HAL_IncTick+0x24>)
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000000 	.word	0x20000000
 8000334:	20000020 	.word	0x20000020

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4d0d      	ldr	r5, [pc, #52]	; (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4d0b      	ldr	r5, [pc, #44]	; (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	; (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
