
cpe316-dac-intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000053c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c4  080006c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006c4  080006c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080006c4  080006c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006c4  080006c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c4  080006c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c8  080006c8  000106c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080006cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080006d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080006d8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000318c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009ff  00000000  00000000  0002320b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000348  00000000  00000000  00023c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000257  00000000  00000000  00023f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242f3  00000000  00000000  000241af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000036a7  00000000  00000000  000484a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2331  00000000  00000000  0004bb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b6c  00000000  00000000  0012de7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0012e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006ac 	.word	0x080006ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080006ac 	.word	0x080006ac

080001c8 <main>:

#include "main.h"
#define VOUT_TO_D(x) 0x3000 | (0xFFF & (int)((double)x / 3.3 * 0xFFF))

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 f8f3 	bl	80003b8 <HAL_Init>
   * Configure SPI Pins		PA4 - SPI_1_NSS		PA5 - SPI_1_SCK
   * 						PA6 - SPI_1_MISO	PA7 - SPI_1_MOSI
   * follow order of configuring registers AFR, OTYPER, PUPDR, OSPEEDR, MODDER
   * to avoid a glitch is created on the output pin
   */
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80001d2:	4b32      	ldr	r3, [pc, #200]	; (800029c <main+0xd4>)
 80001d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d6:	4a31      	ldr	r2, [pc, #196]	; (800029c <main+0xd4>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 |
 80001de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e2:	6a1b      	ldr	r3, [r3, #32]
 80001e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80001ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80001f0:	6213      	str	r3, [r2, #32]
		  	  	  	 GPIO_AFRL_AFSEL5 |		// mask AF selection
		  	  	  	 GPIO_AFRL_AFSEL7);
  GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 80001f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fc:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000200:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000204:	6213      	str	r3, [r2, #32]
  		  	  	    (5 << GPIO_AFRL_AFSEL5_Pos) |
				    (5 << GPIO_AFRL_AFSEL7_Pos));

  GPIOA->MODER &= ~(GPIO_MODER_MODE4 |
 8000206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000210:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000214:	6013      	str	r3, [r2, #0]
		  	  	  	GPIO_MODER_MODE5 |		// mask function
		  	  	  	GPIO_MODER_MODE7);
  GPIOA->MODER |= (GPIO_MODER_MODE4_1 |
 8000216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000220:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 8000224:	6013      	str	r3, [r2, #0]
		  	  	   GPIO_MODER_MODE5_1 |		// enable alternate function
		  	  	   GPIO_MODER_MODE7_1);

  // configure SPI 1
  RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		// enable SPI1 clock
 8000226:	4b1d      	ldr	r3, [pc, #116]	; (800029c <main+0xd4>)
 8000228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800022a:	4a1c      	ldr	r2, [pc, #112]	; (800029c <main+0xd4>)
 800022c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000230:	6613      	str	r3, [r2, #96]	; 0x60
  SPI1->CR1 |= SPI_CR1_MSTR;				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 8000232:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <main+0xd8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <main+0xd8>)
 8000238:	f043 0304 	orr.w	r3, r3, #4
 800023c:	6013      	str	r3, [r2, #0]
  SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <main+0xd8>)
 8000240:	f640 720c 	movw	r2, #3852	; 0xf0c
 8000244:	605a      	str	r2, [r3, #4]
		  	   SPI_CR2_NSSP |				// create CS pulse
			   (0xF << SPI_CR2_DS_Pos));	// 16-bit data frames
  SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <main+0xd8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <main+0xd8>)
 800024c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000250:	6013      	str	r3, [r2, #0]


  uint16_t spi_data_low = VOUT_TO_D(1);
 8000252:	f243 43d8 	movw	r3, #13528	; 0x34d8
 8000256:	807b      	strh	r3, [r7, #2]
  uint16_t spi_data_high = VOUT_TO_D(2);
 8000258:	f643 13b1 	movw	r3, #14769	; 0x39b1
 800025c:	803b      	strh	r3, [r7, #0]
  uint16_t temp;

  while (1)
  {
	  for (int i = 0; i < 3; i++) {
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e00c      	b.n	800027e <main+0xb6>
		  while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
 8000264:	bf00      	nop
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0xd8>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f9      	beq.n	8000266 <main+0x9e>
		  SPI1->DR = spi_data_low;
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <main+0xd8>)
 8000274:	887b      	ldrh	r3, [r7, #2]
 8000276:	60d3      	str	r3, [r2, #12]
	  for (int i = 0; i < 3; i++) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	ddef      	ble.n	8000264 <main+0x9c>
	  }					// clear RX FIFO

	  while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
 8000284:	bf00      	nop
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0xd8>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	f003 0302 	and.w	r3, r3, #2
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f9      	beq.n	8000286 <main+0xbe>
	  SPI1->DR = spi_data_high;					// clear RX FIFO
 8000292:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <main+0xd8>)
 8000294:	883b      	ldrh	r3, [r7, #0]
 8000296:	60d3      	str	r3, [r2, #12]
	  for (int i = 0; i < 3; i++) {
 8000298:	e7e1      	b.n	800025e <main+0x96>
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000
 80002a0:	40013000 	.word	0x40013000

080002a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_MspInit+0x44>)
 80002ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ae:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <HAL_MspInit+0x44>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6613      	str	r3, [r2, #96]	; 0x60
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <HAL_MspInit+0x44>)
 80002b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_MspInit+0x44>)
 80002c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <HAL_MspInit+0x44>)
 80002c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002cc:	6593      	str	r3, [r2, #88]	; 0x58
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <HAL_MspInit+0x44>)
 80002d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <NMI_Handler+0x4>

080002f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <HardFault_Handler+0x4>

080002f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <MemManage_Handler+0x4>

080002fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <BusFault_Handler+0x4>

08000304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler+0x4>

0800030a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000338:	f000 f89a 	bl	8000470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800039c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000368:	f7ff ffea 	bl	8000340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	; (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 f967 	bl	8000664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000396:	f7ff ff17 	bl	80001c8 <main>

0800039a <LoopForever>:

LoopForever:
    b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800039c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003a8:	080006cc 	.word	0x080006cc
  ldr r2, =_sbss
 80003ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003b0:	2000002c 	.word	0x2000002c

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003be:	2300      	movs	r3, #0
 80003c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_Init+0x3c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <HAL_Init+0x3c>)
 80003c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ce:	2003      	movs	r0, #3
 80003d0:	f000 f914 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f80f 	bl	80003f8 <HAL_InitTick>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d002      	beq.n	80003e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80003e0:	2301      	movs	r3, #1
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	e001      	b.n	80003ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003e6:	f7ff ff5d 	bl	80002a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40022000 	.word	0x40022000

080003f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <HAL_InitTick+0x6c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d023      	beq.n	8000454 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <HAL_InitTick+0x70>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <HAL_InitTick+0x6c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041a:	fbb3 f3f1 	udiv	r3, r3, r1
 800041e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f911 	bl	800064a <HAL_SYSTICK_Config>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d10f      	bne.n	800044e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b0f      	cmp	r3, #15
 8000432:	d809      	bhi.n	8000448 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000434:	2200      	movs	r2, #0
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	f04f 30ff 	mov.w	r0, #4294967295
 800043c:	f000 f8e9 	bl	8000612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <HAL_InitTick+0x74>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	e007      	b.n	8000458 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e004      	b.n	8000458 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	73fb      	strb	r3, [r7, #15]
 8000452:	e001      	b.n	8000458 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000458:	7bfb      	ldrb	r3, [r7, #15]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000008 	.word	0x20000008
 8000468:	20000000 	.word	0x20000000
 800046c:	20000004 	.word	0x20000004

08000470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_IncTick+0x20>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_IncTick+0x24>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_IncTick+0x24>)
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000008 	.word	0x20000008
 8000494:	20000028 	.word	0x20000028

08000498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f003 0307 	and.w	r3, r3, #7
 80004a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <__NVIC_SetPriorityGrouping+0x44>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ca:	4a04      	ldr	r2, [pc, #16]	; (80004dc <__NVIC_SetPriorityGrouping+0x44>)
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	60d3      	str	r3, [r2, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <__NVIC_GetPriorityGrouping+0x18>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	0a1b      	lsrs	r3, r3, #8
 80004ea:	f003 0307 	and.w	r3, r3, #7
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	db0a      	blt.n	8000526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	b2da      	uxtb	r2, r3
 8000514:	490c      	ldr	r1, [pc, #48]	; (8000548 <__NVIC_SetPriority+0x4c>)
 8000516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051a:	0112      	lsls	r2, r2, #4
 800051c:	b2d2      	uxtb	r2, r2
 800051e:	440b      	add	r3, r1
 8000520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000524:	e00a      	b.n	800053c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4908      	ldr	r1, [pc, #32]	; (800054c <__NVIC_SetPriority+0x50>)
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	3b04      	subs	r3, #4
 8000534:	0112      	lsls	r2, r2, #4
 8000536:	b2d2      	uxtb	r2, r2
 8000538:	440b      	add	r3, r1
 800053a:	761a      	strb	r2, [r3, #24]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000e100 	.word	0xe000e100
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000550:	b480      	push	{r7}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	f1c3 0307 	rsb	r3, r3, #7
 800056a:	2b04      	cmp	r3, #4
 800056c:	bf28      	it	cs
 800056e:	2304      	movcs	r3, #4
 8000570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3304      	adds	r3, #4
 8000576:	2b06      	cmp	r3, #6
 8000578:	d902      	bls.n	8000580 <NVIC_EncodePriority+0x30>
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3b03      	subs	r3, #3
 800057e:	e000      	b.n	8000582 <NVIC_EncodePriority+0x32>
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	f04f 32ff 	mov.w	r2, #4294967295
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43da      	mvns	r2, r3
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	401a      	ands	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000598:	f04f 31ff 	mov.w	r1, #4294967295
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	43d9      	mvns	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	4313      	orrs	r3, r2
         );
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3724      	adds	r7, #36	; 0x24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005c8:	d301      	bcc.n	80005ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00f      	b.n	80005ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <SysTick_Config+0x40>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005d6:	210f      	movs	r1, #15
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f7ff ff8e 	bl	80004fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SysTick_Config+0x40>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SysTick_Config+0x40>)
 80005e8:	2207      	movs	r2, #7
 80005ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	e000e010 	.word	0xe000e010

080005fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff47 	bl	8000498 <__NVIC_SetPriorityGrouping>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000624:	f7ff ff5c 	bl	80004e0 <__NVIC_GetPriorityGrouping>
 8000628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	6978      	ldr	r0, [r7, #20]
 8000630:	f7ff ff8e 	bl	8000550 <NVIC_EncodePriority>
 8000634:	4602      	mov	r2, r0
 8000636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff5d 	bl	80004fc <__NVIC_SetPriority>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffb0 	bl	80005b8 <SysTick_Config>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <__libc_init_array>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	4d0d      	ldr	r5, [pc, #52]	; (800069c <__libc_init_array+0x38>)
 8000668:	4c0d      	ldr	r4, [pc, #52]	; (80006a0 <__libc_init_array+0x3c>)
 800066a:	1b64      	subs	r4, r4, r5
 800066c:	10a4      	asrs	r4, r4, #2
 800066e:	2600      	movs	r6, #0
 8000670:	42a6      	cmp	r6, r4
 8000672:	d109      	bne.n	8000688 <__libc_init_array+0x24>
 8000674:	4d0b      	ldr	r5, [pc, #44]	; (80006a4 <__libc_init_array+0x40>)
 8000676:	4c0c      	ldr	r4, [pc, #48]	; (80006a8 <__libc_init_array+0x44>)
 8000678:	f000 f818 	bl	80006ac <_init>
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	2600      	movs	r6, #0
 8000682:	42a6      	cmp	r6, r4
 8000684:	d105      	bne.n	8000692 <__libc_init_array+0x2e>
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f855 3b04 	ldr.w	r3, [r5], #4
 800068c:	4798      	blx	r3
 800068e:	3601      	adds	r6, #1
 8000690:	e7ee      	b.n	8000670 <__libc_init_array+0xc>
 8000692:	f855 3b04 	ldr.w	r3, [r5], #4
 8000696:	4798      	blx	r3
 8000698:	3601      	adds	r6, #1
 800069a:	e7f2      	b.n	8000682 <__libc_init_array+0x1e>
 800069c:	080006c4 	.word	0x080006c4
 80006a0:	080006c4 	.word	0x080006c4
 80006a4:	080006c4 	.word	0x080006c4
 80006a8:	080006c8 	.word	0x080006c8

080006ac <_init>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	bf00      	nop
 80006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b2:	bc08      	pop	{r3}
 80006b4:	469e      	mov	lr, r3
 80006b6:	4770      	bx	lr

080006b8 <_fini>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr
