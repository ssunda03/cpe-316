
cpe316_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  0800045c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000464  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000468  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000468  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bfe  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000055d  00000000  00000000  00021c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  000221d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000183  00000000  00000000  000223f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f8c  00000000  00000000  0002257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000236c  00000000  00000000  00046507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18ec  00000000  00000000  00048873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006b4  00000000  00000000  0012a160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012a814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000444 	.word	0x08000444

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000444 	.word	0x08000444

080001c8 <main>:
void PartACCR();
void PartB();

volatile uint8_t WAVE_STATE;

int main() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	//PartACCR();
	PartB();
 80001cc:	f000 f804 	bl	80001d8 <PartB>
 80001d0:	2300      	movs	r3, #0
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <PartB>:
			WAVE_STATE = 0;
		}
	}
}

void PartB() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// clock and timer configuration
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80001dc:	4b39      	ldr	r3, [pc, #228]	; (80002c4 <PartB+0xec>)
 80001de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001e0:	4a38      	ldr	r2, [pc, #224]	; (80002c4 <PartB+0xec>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001e8:	4b36      	ldr	r3, [pc, #216]	; (80002c4 <PartB+0xec>)
 80001ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ec:	4a35      	ldr	r2, [pc, #212]	; (80002c4 <PartB+0xec>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	64d3      	str	r3, [r2, #76]	; 0x4c

	// set LED to waveform
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000212:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~GPIO_PIN_5;
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f023 0320 	bic.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]

	// Output Frequency = Clock Frequency / ((PSC + 1) * (ARR + 1))
	TIM2->PSC = 0;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2200      	movs	r2, #0
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFFFFFF;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	f04f 32ff 	mov.w	r2, #4294967295
 8000234:	62da      	str	r2, [r3, #44]	; 0x2c

	// set timer in upcounting mode
	TIM2->CR1 &= ~TIM_CR1_CMS & ~TIM_CR1_DIR;
 8000236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000244:	6013      	str	r3, [r2, #0]

	// enable CCR
	TIM2->DIER |= TIM_DIER_CC1IE;
 8000246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000250:	f043 0302 	orr.w	r3, r3, #2
 8000254:	60d3      	str	r3, [r2, #12]

	// clear interrupt flag
	TIM2->SR &= ~TIM_SR_CC1IF;
 8000256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025a:	691b      	ldr	r3, [r3, #16]
 800025c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000260:	f023 0302 	bic.w	r3, r3, #2
 8000264:	6113      	str	r3, [r2, #16]

	// set CCR to count to 399 for 10kHz interrupts --> 5kHz waveform
	TIM2->CCR1 = 399;
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	f240 128f 	movw	r2, #399	; 0x18f
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000270:	b662      	cpsie	i
}
 8000272:	bf00      	nop

	// enable interrupts
	// ARM Core
	__enable_irq();
	//NVIC enable
	NVIC->ISER[0] = 1 << (TIM2_IRQn & 0x1F); // 28th position on the vector table
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <PartB+0xf0>)
 8000276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800027a:	601a      	str	r2, [r3, #0]

	WAVE_STATE = 0;
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <PartB+0xf4>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
	// enable timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8000282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
	while (1) {
		if (WAVE_STATE == 1) {
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <PartB+0xf4>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b01      	cmp	r3, #1
 800029a:	d1fa      	bne.n	8000292 <PartB+0xba>
			GPIOA->ODR ^= GPIO_PIN_5;
 800029c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a6:	f083 0320 	eor.w	r3, r3, #32
 80002aa:	6153      	str	r3, [r2, #20]
			//TIM2->CNT = 0;
			TIM2->CCR1 += 399;
 80002ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b6:	f203 138f 	addw	r3, r3, #399	; 0x18f
 80002ba:	6353      	str	r3, [r2, #52]	; 0x34
			WAVE_STATE = 0;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <PartB+0xf4>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
		if (WAVE_STATE == 1) {
 80002c2:	e7e6      	b.n	8000292 <PartB+0xba>
 80002c4:	40021000 	.word	0x40021000
 80002c8:	e000e100 	.word	0xe000e100
 80002cc:	20000020 	.word	0x20000020

080002d0 <TIM2_IRQHandler>:
		WAVE_STATE = 2;
	}
}*/

// PART B
void TIM2_IRQHandler() {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d007      	beq.n	80002f2 <TIM2_IRQHandler+0x22>
		TIM2->SR &= ~TIM_SR_CC1IF;
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ec:	f023 0302 	bic.w	r3, r3, #2
 80002f0:	6113      	str	r3, [r2, #16]
	}

	WAVE_STATE = 1;
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <TIM2_IRQHandler+0x34>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000020 	.word	0x20000020

08000308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800030c:	e7fe      	b.n	800030c <NMI_Handler+0x4>

0800030e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <HardFault_Handler+0x4>

08000314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <MemManage_Handler+0x4>

0800031a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <BusFault_Handler+0x4>

08000320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <UsageFault_Handler+0x4>

08000326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000354:	f000 f83e 	bl	80003d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <SystemInit+0x20>)
 8000362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <SystemInit+0x20>)
 8000368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800036c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000384:	f7ff ffea 	bl	800035c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ae:	f000 f825 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003b2:	f7ff ff09 	bl	80001c8 <main>

080003b6 <LoopForever>:

LoopForever:
    b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c4:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003cc:	20000028 	.word	0x20000028

080003d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC1_2_IRQHandler>
	...

080003d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_IncTick+0x20>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <HAL_IncTick+0x24>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4413      	add	r3, r2
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <HAL_IncTick+0x24>)
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000024 	.word	0x20000024

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	; (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	; (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	; (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	; (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
