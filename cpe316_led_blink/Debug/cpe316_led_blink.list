
cpe316_led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080006cc  080006cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006cc  080006cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080006d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080006e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080006e0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000030fb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009df  00000000  00000000  0002317a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000348  00000000  00000000  00023b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000257  00000000  00000000  00023ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ed  00000000  00000000  000240ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003656  00000000  00000000  000483ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e22aa  00000000  00000000  0004ba42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b68  00000000  00000000  0012dcec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006b4 	.word	0x080006b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080006b4 	.word	0x080006b4

080001c8 <main>:
#include "main.h"

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_Init();
 80001cc:	f000 f8c8 	bl	8000360 <HAL_Init>

	// turns on clock to GPIO banks A and C
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOCEN);
 80001d0:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <main+0x7c>)
 80001d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d4:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <main+0x7c>)
 80001d6:	f043 0305 	orr.w	r3, r3, #5
 80001da:	64d3      	str	r3, [r2, #76]	; 0x4c

  // bank A as GPIO mode
  GPIOA->MODER &= ~(GPIO_MODER_MODE5);
 80001dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001ea:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (GPIO_MODER_MODE5_0);
 80001ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fa:	6013      	str	r3, [r2, #0]

  // bank C as GPIO mode
  GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <main+0x80>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a11      	ldr	r2, [pc, #68]	; (8000248 <main+0x80>)
 8000202:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000206:	6013      	str	r3, [r2, #0]
  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13);
 8000208:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <main+0x80>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <main+0x80>)
 800020e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000212:	60d3      	str	r3, [r2, #12]

  while (1)
  {
		  GPIOA->ODR &= ~GPIO_PIN_5;	// set pin 5 of PORT A to 0
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f023 0320 	bic.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
		  HAL_Delay(100);
 8000224:	2064      	movs	r0, #100	; 0x64
 8000226:	f000 f917 	bl	8000458 <HAL_Delay>
	      GPIOA->ODR |= GPIO_PIN_5;			// set pin 5 of PORT A to 1
 800022a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000234:	f043 0320 	orr.w	r3, r3, #32
 8000238:	6153      	str	r3, [r2, #20]
	      HAL_Delay(100);
 800023a:	2064      	movs	r0, #100	; 0x64
 800023c:	f000 f90c 	bl	8000458 <HAL_Delay>
		  GPIOA->ODR &= ~GPIO_PIN_5;	// set pin 5 of PORT A to 0
 8000240:	e7e8      	b.n	8000214 <main+0x4c>
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	48000800 	.word	0x48000800

0800024c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <HAL_MspInit+0x44>)
 8000254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000256:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <HAL_MspInit+0x44>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6613      	str	r3, [r2, #96]	; 0x60
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <HAL_MspInit+0x44>)
 8000260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <HAL_MspInit+0x44>)
 800026c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800026e:	4a08      	ldr	r2, [pc, #32]	; (8000290 <HAL_MspInit+0x44>)
 8000270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000274:	6593      	str	r3, [r2, #88]	; 0x58
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_MspInit+0x44>)
 8000278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800027a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800027e:	603b      	str	r3, [r7, #0]
 8000280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <NMI_Handler+0x4>

0800029a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <HardFault_Handler+0x4>

080002a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <MemManage_Handler+0x4>

080002a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002aa:	e7fe      	b.n	80002aa <BusFault_Handler+0x4>

080002ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <UsageFault_Handler+0x4>

080002b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e0:	f000 f89a 	bl	8000418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <SystemInit+0x20>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <SystemInit+0x20>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800030c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000310:	f7ff ffea 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800033a:	f000 f997 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800033e:	f7ff ff43 	bl	80001c8 <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000344:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000350:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000354:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000358:	2000002c 	.word	0x2000002c

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <HAL_Init+0x3c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <HAL_Init+0x3c>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000376:	2003      	movs	r0, #3
 8000378:	f000 f944 	bl	8000604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800037c:	2000      	movs	r0, #0
 800037e:	f000 f80f 	bl	80003a0 <HAL_InitTick>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000388:	2301      	movs	r3, #1
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	e001      	b.n	8000392 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800038e:	f7ff ff5d 	bl	800024c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000392:	79fb      	ldrb	r3, [r7, #7]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40022000 	.word	0x40022000

080003a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <HAL_InitTick+0x6c>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d023      	beq.n	80003fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <HAL_InitTick+0x70>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <HAL_InitTick+0x6c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f941 	bl	8000652 <HAL_SYSTICK_Config>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d10f      	bne.n	80003f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d809      	bhi.n	80003f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003dc:	2200      	movs	r2, #0
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	f04f 30ff 	mov.w	r0, #4294967295
 80003e4:	f000 f919 	bl	800061a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003e8:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <HAL_InitTick+0x74>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6013      	str	r3, [r2, #0]
 80003ee:	e007      	b.n	8000400 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80003f0:	2301      	movs	r3, #1
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	e004      	b.n	8000400 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	73fb      	strb	r3, [r7, #15]
 80003fa:	e001      	b.n	8000400 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80003fc:	2301      	movs	r3, #1
 80003fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000008 	.word	0x20000008
 8000410:	20000000 	.word	0x20000000
 8000414:	20000004 	.word	0x20000004

08000418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_IncTick+0x20>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <HAL_IncTick+0x24>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4413      	add	r3, r2
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_IncTick+0x24>)
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000008 	.word	0x20000008
 800043c:	20000028 	.word	0x20000028

08000440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  return uwTick;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <HAL_GetTick+0x14>)
 8000446:	681b      	ldr	r3, [r3, #0]
}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028

08000458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	f7ff ffee 	bl	8000440 <HAL_GetTick>
 8000464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000470:	d005      	beq.n	800047e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_Delay+0x44>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	4413      	add	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800047e:	bf00      	nop
 8000480:	f7ff ffde 	bl	8000440 <HAL_GetTick>
 8000484:	4602      	mov	r2, r0
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	429a      	cmp	r2, r3
 800048e:	d8f7      	bhi.n	8000480 <HAL_Delay+0x28>
  {
  }
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000008 	.word	0x20000008

080004a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <__NVIC_SetPriorityGrouping+0x44>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <__NVIC_SetPriorityGrouping+0x44>)
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	60d3      	str	r3, [r2, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <__NVIC_GetPriorityGrouping+0x18>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	f003 0307 	and.w	r3, r3, #7
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db0a      	blt.n	800052e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <__NVIC_SetPriority+0x4c>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052c:	e00a      	b.n	8000544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <__NVIC_SetPriority+0x50>)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	3b04      	subs	r3, #4
 800053c:	0112      	lsls	r2, r2, #4
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	440b      	add	r3, r1
 8000542:	761a      	strb	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000558:	b480      	push	{r7}
 800055a:	b089      	sub	sp, #36	; 0x24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	f1c3 0307 	rsb	r3, r3, #7
 8000572:	2b04      	cmp	r3, #4
 8000574:	bf28      	it	cs
 8000576:	2304      	movcs	r3, #4
 8000578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3304      	adds	r3, #4
 800057e:	2b06      	cmp	r3, #6
 8000580:	d902      	bls.n	8000588 <NVIC_EncodePriority+0x30>
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3b03      	subs	r3, #3
 8000586:	e000      	b.n	800058a <NVIC_EncodePriority+0x32>
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 32ff 	mov.w	r2, #4294967295
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43da      	mvns	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	401a      	ands	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a0:	f04f 31ff 	mov.w	r1, #4294967295
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	43d9      	mvns	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	4313      	orrs	r3, r2
         );
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3724      	adds	r7, #36	; 0x24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005d0:	d301      	bcc.n	80005d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00f      	b.n	80005f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <SysTick_Config+0x40>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3b01      	subs	r3, #1
 80005dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005de:	210f      	movs	r1, #15
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f7ff ff8e 	bl	8000504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SysTick_Config+0x40>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SysTick_Config+0x40>)
 80005f0:	2207      	movs	r2, #7
 80005f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	e000e010 	.word	0xe000e010

08000604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff47 	bl	80004a0 <__NVIC_SetPriorityGrouping>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b086      	sub	sp, #24
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
 8000626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800062c:	f7ff ff5c 	bl	80004e8 <__NVIC_GetPriorityGrouping>
 8000630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	6978      	ldr	r0, [r7, #20]
 8000638:	f7ff ff8e 	bl	8000558 <NVIC_EncodePriority>
 800063c:	4602      	mov	r2, r0
 800063e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff5d 	bl	8000504 <__NVIC_SetPriority>
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ffb0 	bl	80005c0 <SysTick_Config>
 8000660:	4603      	mov	r3, r0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006cc 	.word	0x080006cc
 80006a8:	080006cc 	.word	0x080006cc
 80006ac:	080006cc 	.word	0x080006cc
 80006b0:	080006d0 	.word	0x080006d0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
