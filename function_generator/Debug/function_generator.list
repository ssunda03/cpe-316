
function_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001688  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800185c  0800185c  00020e1c  2**0
                  CONTENTS
  4 .ARM          00000000  0800185c  0800185c  00020e1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800185c  0800185c  00020e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e1c  20000000  08001864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000e1c  08002680  00020e1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  08002680  00020e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020e1c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020e4c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005194  00000000  00000000  00020e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010a7  00000000  00000000  00026023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  000270d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000419  00000000  00000000  00027668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002470e  00000000  00000000  00027a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000537b  00000000  00000000  0004c18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2ee6  00000000  00000000  0005150a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014e0  00000000  00000000  001343f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001358d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000e1c 	.word	0x20000e1c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017f8 	.word	0x080017f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000e20 	.word	0x20000e20
 80001c4:	080017f8 	.word	0x080017f8

080001c8 <loop_keypad_once>:
	return '\0';
}

// returns index of button pressed or -1 if nothing is pressed
int8_t loop_keypad_once()
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	uint8_t col, row = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71bb      	strb	r3, [r7, #6]

	// clear column ODR
	GPIOC->ODR &= ~(GPIO_ODR_OD4 | GPIO_ODR_OD5 | GPIO_ODR_OD6);
 80001d2:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <loop_keypad_once+0x88>)
 80001d4:	695b      	ldr	r3, [r3, #20]
 80001d6:	4a1e      	ldr	r2, [pc, #120]	; (8000250 <loop_keypad_once+0x88>)
 80001d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80001dc:	6153      	str	r3, [r2, #20]

	// drive each column once
	for(col = 0; col < NUM_COL; col++)
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	e029      	b.n	8000238 <loop_keypad_once+0x70>
	{
		// drive column
		GPIOC->BSRR = (1 << NUM_ROW) << col;
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2210      	movs	r2, #16
 80001e8:	409a      	lsls	r2, r3
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <loop_keypad_once+0x88>)
 80001ec:	619a      	str	r2, [r3, #24]

		// check rows
		for(row = 0; row < NUM_ROW; row++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	71bb      	strb	r3, [r7, #6]
 80001f2:	e015      	b.n	8000220 <loop_keypad_once+0x58>
		{
			if(GPIOC->IDR & (1 << row))
 80001f4:	4b16      	ldr	r3, [pc, #88]	; (8000250 <loop_keypad_once+0x88>)
 80001f6:	691b      	ldr	r3, [r3, #16]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	2101      	movs	r1, #1
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	4013      	ands	r3, r2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d009      	beq.n	800021a <loop_keypad_once+0x52>
			{
				return NUM_COL * row + col;
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	461a      	mov	r2, r3
 800020a:	0052      	lsls	r2, r2, #1
 800020c:	4413      	add	r3, r2
 800020e:	b2da      	uxtb	r2, r3
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4413      	add	r3, r2
 8000214:	b2db      	uxtb	r3, r3
 8000216:	b25b      	sxtb	r3, r3
 8000218:	e013      	b.n	8000242 <loop_keypad_once+0x7a>
		for(row = 0; row < NUM_ROW; row++)
 800021a:	79bb      	ldrb	r3, [r7, #6]
 800021c:	3301      	adds	r3, #1
 800021e:	71bb      	strb	r3, [r7, #6]
 8000220:	79bb      	ldrb	r3, [r7, #6]
 8000222:	2b03      	cmp	r3, #3
 8000224:	d9e6      	bls.n	80001f4 <loop_keypad_once+0x2c>
			}
		}

		// disable column
		GPIOC->BSRR = ((1 << GPIO_BSRR_BR0_Pos) << NUM_ROW) << col;
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800022c:	409a      	lsls	r2, r3
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <loop_keypad_once+0x88>)
 8000230:	619a      	str	r2, [r3, #24]
	for(col = 0; col < NUM_COL; col++)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	3301      	adds	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d9d2      	bls.n	80001e4 <loop_keypad_once+0x1c>
	}

	return -1;
 800023e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000242:	4618      	mov	r0, r3
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	48000800 	.word	0x48000800

08000254 <keypad_init>:

	return -1;
}

void keypad_init()
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	 * rows are on pins PC0(row 1) PC1(row 2) PC2(row 3) PC3(row 4)
	 * sets pull down resistors on row pins for better reads
	 * */

	// enable clock for port C
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000258:	4b14      	ldr	r3, [pc, #80]	; (80002ac <keypad_init+0x58>)
 800025a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <keypad_init+0x58>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	64d3      	str	r3, [r2, #76]	; 0x4c

	// drive columns on pins PC4(col 1) PC5(col 2) PC6(col 3)
	GPIOC->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6); // clear pins
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <keypad_init+0x5c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <keypad_init+0x5c>)
 800026a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800026e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= ( (1 << GPIO_MODER_MODE4_Pos) |
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <keypad_init+0x5c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <keypad_init+0x5c>)
 8000276:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 800027a:	6013      	str	r3, [r2, #0]
						(1 << GPIO_MODER_MODE5_Pos) |
						(1 << GPIO_MODER_MODE6_Pos) ); // set pins to output

	// read from rows on pins PC0(row 1) PC1(row 2) PC2(row 3) PC4(row 4)
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <keypad_init+0x5c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <keypad_init+0x5c>)
 8000282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000286:	6013      	str	r3, [r2, #0]
						GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // clear pins, sets them to input

	// set pull-down resistors for rows to prevent floating voltages (better for reading)
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 |
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <keypad_init+0x5c>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <keypad_init+0x5c>)
 800028e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000292:	60d3      	str	r3, [r2, #12]
						GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3); // clear pins
	GPIOC->PUPDR |= ( (2 << GPIO_PUPDR_PUPD0_Pos) |
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <keypad_init+0x5c>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <keypad_init+0x5c>)
 800029a:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 800029e:	60d3      	str	r3, [r2, #12]
						(2 << GPIO_PUPDR_PUPD1_Pos) |
						(2 << GPIO_PUPDR_PUPD2_Pos) |
						(2 << GPIO_PUPDR_PUPD3_Pos) ); // pull pins low

}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000
 80002b0:	48000800 	.word	0x48000800

080002b4 <DAC_volt_conv>:


/* converts an int representing millivolts to a 16 bit int DAC value
   maxes out at the highest voltage possible on the DAC */
uint16_t DAC_volt_conv(int mv)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	return ( 0x3000 | (0xFFF & (uint16_t)(mv * 0xFFF / 3300) ) );
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4613      	mov	r3, r2
 80002c0:	031b      	lsls	r3, r3, #12
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <DAC_volt_conv+0x38>)
 80002c6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ca:	441a      	add	r2, r3
 80002cc:	12d2      	asrs	r2, r2, #11
 80002ce:	17db      	asrs	r3, r3, #31
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002d8:	b29b      	uxth	r3, r3
 80002da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002de:	b29b      	uxth	r3, r3
	// control bits | bit mask of 16 bit int version of the ratio of input to max millivolt
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	9ee009ef 	.word	0x9ee009ef

080002f0 <DAC_write>:

// writes a 16 bit value to the DAC
void DAC_write(uint16_t data)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
	while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
 80002fa:	bf00      	nop
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <DAC_write+0x2c>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <DAC_write+0xc>
	SPI1->DR = data;
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <DAC_write+0x2c>)
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	60d3      	str	r3, [r2, #12]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40013000 	.word	0x40013000

08000320 <DAC_init>:

// initializes the SPI for the DAC
void DAC_init()
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	* Configure SPI Pins		PA4 - SPI_1_NSS		PA5 - SPI_1_SCK
	* 							PA6 - SPI_1_MISO	PA7 - SPI_1_MOSI
	* follow order of configuring registers AFR, OTYPER, PUPDR, OSPEEDR, MODDER
	* to avoid a glitch is created on the output pin
	*/
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000324:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <DAC_init+0xb4>)
 8000326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000328:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <DAC_init+0xb4>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |	// mask AF selection
 8000330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800033a:	b29b      	uxth	r3, r3
 800033c:	6213      	str	r3, [r2, #32]
					  GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 800033e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000348:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800034c:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000350:	6213      	str	r3, [r2, #32]
					(5 << GPIO_AFRL_AFSEL5_Pos) |
					(5 << GPIO_AFRL_AFSEL6_Pos) |
					(5 << GPIO_AFRL_AFSEL7_Pos));
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 |		// push-pull output
 8000352:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800035c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000360:	6053      	str	r3, [r2, #4]
					  GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 |		// no pull ups or pull downs
 8000362:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800036c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000370:	60d3      	str	r3, [r2, #12]
					GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | 					// low speed
 8000372:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800037c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000380:	6093      	str	r3, [r2, #8]
					  GPIO_OSPEEDR_OSPEED5 |
					  GPIO_OSPEEDR_OSPEED6 |
					  GPIO_OSPEEDR_OSPEED7);
	GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
 8000382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800038c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000390:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
 8000392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800039c:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 80003a0:	6013      	str	r3, [r2, #0]
				   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);

	// configure SPI 1
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);	// enable SPI1 clock
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <DAC_init+0xb4>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <DAC_init+0xb4>)
 80003a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ac:	6613      	str	r3, [r2, #96]	; 0x60
	SPI1->CR1 = (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <DAC_init+0xb8>)
 80003b0:	2204      	movs	r2, #4
 80003b2:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <DAC_init+0xb8>)
 80003b6:	f640 720c 	movw	r2, #3852	; 0xf0c
 80003ba:	605a      	str	r2, [r3, #4]
			   SPI_CR2_NSSP |				// create CS pulse
			   (0xF << SPI_CR2_DS_Pos));	// 16-bit data frames
	SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <DAC_init+0xb8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <DAC_init+0xb8>)
 80003c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40013000 	.word	0x40013000

080003dc <TIM2_init>:

void TIM2_init(uint32_t arr, uint32_t psc, uint32_t ccr1);


void TIM2_init(uint32_t arr, uint32_t psc, uint32_t ccr1)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
	// enable the clock for TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // TIM2 clock
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <TIM2_init+0x90>)
 80003ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ec:	4a1f      	ldr	r2, [pc, #124]	; (800046c <TIM2_init+0x90>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6593      	str	r3, [r2, #88]	; 0x58

	// configure timer count settings
	TIM2->CR1 &= ~TIM_CR1_CMS; // sets count to be one directional
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000402:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_DIR; // sets timer to count up
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f023 0310 	bic.w	r3, r3, #16
 8000412:	6013      	str	r3, [r2, #0]
	TIM2->PSC = psc; // divides timer clock by PSC + 1
 8000414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = arr;//804 // timer counts to ARR + 1 // 399 for 50% (w/o CCR1) // 799 when w CCR1
 800041c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	62d3      	str	r3, [r2, #44]	; 0x2c
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000424:	b662      	cpsie	i
}
 8000426:	bf00      	nop
	//TIM2->CCR1 = ccr1;//594 // compares count to CCR1 // 599 for 25% duty b/c 599 ~= 0.75*799

	// enable interrupts
	__enable_irq(); // enables ARM interrupts
	NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F)); // enables NVIC TIM2 interrupt
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <TIM2_init+0x94>)
 800042a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800042e:	601a      	str	r2, [r3, #0]
	TIM2->SR &= ~TIM_SR_UIF; // resets TIM2 update interrupt flag
 8000430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6113      	str	r3, [r2, #16]
	//TIM2->SR &= ~TIM_SR_CC1IF; // resets TIM2 CC1 interrupt flag
	TIM2->DIER |= TIM_DIER_UIE; // enable TIM2 update interrupt
 8000440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	60d3      	str	r3, [r2, #12]
	//TIM2->DIER |= TIM_DIER_CC1IE; // enable TIM2 CC1 interrupt

	// start timer
	TIM2->CR1 |= TIM_CR1_CEN; // enables the counter
 8000450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	e000e100 	.word	0xe000e100

08000474 <main>:
void TIM2_IRQHandler(void); // interrupt handler for TIM2



int main()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800047a:	f000 f9df 	bl	800083c <HAL_Init>

	// configures the system clock to be 32MHz
	sysclk_init();
 800047e:	f000 f91b 	bl	80006b8 <sysclk_init>

	// initializes keypad
	keypad_init();
 8000482:	f7ff fee7 	bl	8000254 <keypad_init>

	// initializes SPI and DAC
	DAC_init();
 8000486:	f7ff ff4b 	bl	8000320 <DAC_init>
	//test_DAC();

	// initializes the TIM2 interrupt and starts the count
	TIM2_init(0x215, 0, 0xFFFFFFFF); // arr, psc, ccr1(configured off in header file)
 800048a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800048e:	2100      	movs	r1, #0
 8000490:	f240 2015 	movw	r0, #533	; 0x215
 8000494:	f7ff ffa2 	bl	80003dc <TIM2_init>
	// finish loop_keypad_once() function in keypad_12.h file
	// test the loop_keypad_once() function with a single output val ?
	// get the mv header files - will be easier to change and get the right voltages

	// wave variables
	WAVE_TYPE wave = SQUARE;
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]
	uint8_t duty = 50;
 800049c:	2332      	movs	r3, #50	; 0x32
 800049e:	73bb      	strb	r3, [r7, #14]
	uint8_t sq_status = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	71fb      	strb	r3, [r7, #7]
	uint16_t sq_low = DAC_volt_conv(100); // 0V
 80004a4:	2064      	movs	r0, #100	; 0x64
 80004a6:	f7ff ff05 	bl	80002b4 <DAC_volt_conv>
 80004aa:	4603      	mov	r3, r0
 80004ac:	80bb      	strh	r3, [r7, #4]
	uint16_t sq_high = DAC_volt_conv(2930); // 3V
 80004ae:	f640 3072 	movw	r0, #2930	; 0xb72
 80004b2:	f7ff feff 	bl	80002b4 <DAC_volt_conv>
 80004b6:	4603      	mov	r3, r0
 80004b8:	807b      	strh	r3, [r7, #2]

	// keypad variables
	int8_t kp_ret = -1;
 80004ba:	23ff      	movs	r3, #255	; 0xff
 80004bc:	707b      	strb	r3, [r7, #1]
	uint8_t kp_val = 0xF;
 80004be:	230f      	movs	r3, #15
 80004c0:	703b      	strb	r3, [r7, #0]

	// lookup table variables
	uint16_t stride_length = 1; // amount to increment lookup table index
 80004c2:	2301      	movs	r3, #1
 80004c4:	81bb      	strh	r3, [r7, #12]
	uint16_t table_index = 0; // index of the look up table --> need as global?
 80004c6:	2300      	movs	r3, #0
 80004c8:	817b      	strh	r3, [r7, #10]
	uint16_t val = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	813b      	strh	r3, [r7, #8]

	while(1)
	{
		// every interval write to DAC
		if(ISR_flag)
 80004ce:	4b65      	ldr	r3, [pc, #404]	; (8000664 <main+0x1f0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d048      	beq.n	800056a <main+0xf6>
		{
			switch(wave)
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d82d      	bhi.n	800053a <main+0xc6>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <main+0x70>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	080004f5 	.word	0x080004f5
 80004e8:	08000517 	.word	0x08000517
 80004ec:	08000523 	.word	0x08000523
 80004f0:	0800052f 	.word	0x0800052f
			{
			case SQUARE:
				sq_status = table_index * 100 / TABLE_SIZE;
 80004f4:	897b      	ldrh	r3, [r7, #10]
 80004f6:	4a5c      	ldr	r2, [pc, #368]	; (8000668 <main+0x1f4>)
 80004f8:	fb82 1203 	smull	r1, r2, r2, r3
 80004fc:	17db      	asrs	r3, r3, #31
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	71fb      	strb	r3, [r7, #7]
				if(sq_status < duty)
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	7bbb      	ldrb	r3, [r7, #14]
 8000506:	429a      	cmp	r2, r3
 8000508:	d202      	bcs.n	8000510 <main+0x9c>
				{
					val = sq_high;
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	813b      	strh	r3, [r7, #8]
//				else // output is currently low
//				{
//					val = sq_high; // set the output high
//					sq_status = 1;
//				}
				break;
 800050e:	e015      	b.n	800053c <main+0xc8>
					val = sq_low;
 8000510:	88bb      	ldrh	r3, [r7, #4]
 8000512:	813b      	strh	r3, [r7, #8]
				break;
 8000514:	e012      	b.n	800053c <main+0xc8>

			case SINE:
				val = sine_table[table_index];
 8000516:	897b      	ldrh	r3, [r7, #10]
 8000518:	4a54      	ldr	r2, [pc, #336]	; (800066c <main+0x1f8>)
 800051a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800051e:	813b      	strh	r3, [r7, #8]
				break;
 8000520:	e00c      	b.n	800053c <main+0xc8>

			case RAMP:
				val = ramp_table[table_index];
 8000522:	897b      	ldrh	r3, [r7, #10]
 8000524:	4a52      	ldr	r2, [pc, #328]	; (8000670 <main+0x1fc>)
 8000526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052a:	813b      	strh	r3, [r7, #8]
				break;
 800052c:	e006      	b.n	800053c <main+0xc8>

			case TRIANGLE:
				val = triangle_table[table_index];
 800052e:	897b      	ldrh	r3, [r7, #10]
 8000530:	4a50      	ldr	r2, [pc, #320]	; (8000674 <main+0x200>)
 8000532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000536:	813b      	strh	r3, [r7, #8]
				break;
 8000538:	e000      	b.n	800053c <main+0xc8>

			default:
				// do 50% duty square wave
				break;
 800053a:	bf00      	nop
			}
			// write to DAC
			DAC_write(val);
 800053c:	893b      	ldrh	r3, [r7, #8]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fed6 	bl	80002f0 <DAC_write>
			// increment index
			table_index = (table_index + (stride_length * STRIDE_SCALE)) % TABLE_SIZE;
 8000544:	897a      	ldrh	r2, [r7, #10]
 8000546:	89bb      	ldrh	r3, [r7, #12]
 8000548:	4413      	add	r3, r2
 800054a:	4a4b      	ldr	r2, [pc, #300]	; (8000678 <main+0x204>)
 800054c:	fb82 1203 	smull	r1, r2, r2, r3
 8000550:	1191      	asrs	r1, r2, #6
 8000552:	17da      	asrs	r2, r3, #31
 8000554:	1a8a      	subs	r2, r1, r2
 8000556:	f44f 7116 	mov.w	r1, #600	; 0x258
 800055a:	fb01 f202 	mul.w	r2, r1, r2
 800055e:	1a9a      	subs	r2, r3, r2
 8000560:	4613      	mov	r3, r2
 8000562:	817b      	strh	r3, [r7, #10]
			// reset ISR_flag
			ISR_flag = 0;
 8000564:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <main+0x1f0>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
		}

		// loop through keyboard once
		kp_ret = loop_keypad_once(); // returns index of button pressed or -1 if no button press detected
 800056a:	f7ff fe2d 	bl	80001c8 <loop_keypad_once>
 800056e:	4603      	mov	r3, r0
 8000570:	707b      	strb	r3, [r7, #1]
		if(kp_ret != -1) // button was pressed
 8000572:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800057a:	d0a8      	beq.n	80004ce <main+0x5a>
		{
			kp_val = keypad_vals[kp_ret];
 800057c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000580:	4a3e      	ldr	r2, [pc, #248]	; (800067c <main+0x208>)
 8000582:	5cd3      	ldrb	r3, [r2, r3]
 8000584:	703b      	strb	r3, [r7, #0]
			switch(kp_val)
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	2b0b      	cmp	r3, #11
 800058a:	d866      	bhi.n	800065a <main+0x1e6>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <main+0x120>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	0800061b 	.word	0x0800061b
 8000598:	080005c5 	.word	0x080005c5
 800059c:	080005cb 	.word	0x080005cb
 80005a0:	080005d1 	.word	0x080005d1
 80005a4:	080005d7 	.word	0x080005d7
 80005a8:	080005dd 	.word	0x080005dd
 80005ac:	080005e3 	.word	0x080005e3
 80005b0:	080005f1 	.word	0x080005f1
 80005b4:	080005fb 	.word	0x080005fb
 80005b8:	08000609 	.word	0x08000609
 80005bc:	08000627 	.word	0x08000627
 80005c0:	08000641 	.word	0x08000641
			{
			case 0x1:
				// set freq to 100Hz
				stride_length = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	81bb      	strh	r3, [r7, #12]
				break;
 80005c8:	e04a      	b.n	8000660 <main+0x1ec>
			case 0x2:
				// set freq to 200Hz
				stride_length = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	81bb      	strh	r3, [r7, #12]
				break;
 80005ce:	e047      	b.n	8000660 <main+0x1ec>
			case 0x3:
				// set freq to 300Hz
				stride_length = 3;
 80005d0:	2303      	movs	r3, #3
 80005d2:	81bb      	strh	r3, [r7, #12]
				break;
 80005d4:	e044      	b.n	8000660 <main+0x1ec>
			case 0x4:
				// set freq to 400Hz
				stride_length = 4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	81bb      	strh	r3, [r7, #12]
				break;
 80005da:	e041      	b.n	8000660 <main+0x1ec>
			case 0x5:
				// set freq to 500Hz
				stride_length = 5;
 80005dc:	2305      	movs	r3, #5
 80005de:	81bb      	strh	r3, [r7, #12]
				break;
 80005e0:	e03e      	b.n	8000660 <main+0x1ec>
			case 0x6:
				// change output to sine waveform
				wave = SINE;
 80005e2:	2301      	movs	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
				stride_length = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	81bb      	strh	r3, [r7, #12]
				table_index = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	817b      	strh	r3, [r7, #10]
				break;
 80005ee:	e037      	b.n	8000660 <main+0x1ec>
			case 0x7:
				// change output to triangle waveform
				wave = TRIANGLE;
 80005f0:	2303      	movs	r3, #3
 80005f2:	73fb      	strb	r3, [r7, #15]
				stride_length = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	81bb      	strh	r3, [r7, #12]
				break;
 80005f8:	e032      	b.n	8000660 <main+0x1ec>
			case 0x8:
				// change output to sawtooth (ramp) waveform
				wave = RAMP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	73fb      	strb	r3, [r7, #15]
				stride_length = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	81bb      	strh	r3, [r7, #12]
				table_index = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	817b      	strh	r3, [r7, #10]
				break;
 8000606:	e02b      	b.n	8000660 <main+0x1ec>
			case 0x9:
				// change output to square waveform
				wave = SQUARE;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
				duty = 50;
 800060c:	2332      	movs	r3, #50	; 0x32
 800060e:	73bb      	strb	r3, [r7, #14]
				stride_length = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	81bb      	strh	r3, [r7, #12]
				table_index = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	817b      	strh	r3, [r7, #10]
				break;
 8000618:	e022      	b.n	8000660 <main+0x1ec>
			case 0x0:
				// if square wave, reset duty cycle to 50%
				if(wave == SQUARE)
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d11e      	bne.n	800065e <main+0x1ea>
				{
					duty = 50;
 8000620:	2332      	movs	r3, #50	; 0x32
 8000622:	73bb      	strb	r3, [r7, #14]
				}
				break;
 8000624:	e01b      	b.n	800065e <main+0x1ea>
			case 0xA: // the '*' button
				// if square wave, decrease duty cycle by 10%, down to a minimum of 10%
				if(wave == SQUARE && duty > 10)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <main+0x1c4>
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d902      	bls.n	8000638 <main+0x1c4>
				{
					duty -= 10;
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	3b0a      	subs	r3, #10
 8000636:	73bb      	strb	r3, [r7, #14]
				}
				HAL_Delay(200);
 8000638:	20c8      	movs	r0, #200	; 0xc8
 800063a:	f000 f97b 	bl	8000934 <HAL_Delay>
				break;
 800063e:	e00f      	b.n	8000660 <main+0x1ec>
			case 0xB:
				// if square wave, increase duty cycle by 10%, up to a maximum of 90%
				if(wave == SQUARE && duty < 90)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <main+0x1de>
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	2b59      	cmp	r3, #89	; 0x59
 800064a:	d802      	bhi.n	8000652 <main+0x1de>
				{
					duty += 10;
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	330a      	adds	r3, #10
 8000650:	73bb      	strb	r3, [r7, #14]
				}
				HAL_Delay(200);
 8000652:	20c8      	movs	r0, #200	; 0xc8
 8000654:	f000 f96e 	bl	8000934 <HAL_Delay>
				break;
 8000658:	e002      	b.n	8000660 <main+0x1ec>
			default:
				// not an expected value
				break;
 800065a:	bf00      	nop
 800065c:	e737      	b.n	80004ce <main+0x5a>
				break;
 800065e:	bf00      	nop
		if(ISR_flag)
 8000660:	e735      	b.n	80004ce <main+0x5a>
 8000662:	bf00      	nop
 8000664:	20000e38 	.word	0x20000e38
 8000668:	2aaaaaab 	.word	0x2aaaaaab
 800066c:	20000000 	.word	0x20000000
 8000670:	200004b0 	.word	0x200004b0
 8000674:	20000960 	.word	0x20000960
 8000678:	1b4e81b5 	.word	0x1b4e81b5
 800067c:	08001810 	.word	0x08001810

08000680 <TIM2_IRQHandler>:



// interrupt handler for TIM2
void TIM2_IRQHandler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
//	GPIOC->ODR ^= (1 << GPIO_ODR_OD8_Pos);

	// reset interrupt flag
	if(TIM2->SR & TIM_SR_UIF) // from ARR
 8000684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	2b00      	cmp	r3, #0
 8000690:	d007      	beq.n	80006a2 <TIM2_IRQHandler+0x22>
	{
		TIM2->SR &= ~TIM_SR_UIF;
 8000692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	6113      	str	r3, [r2, #16]
//	{
//		TIM2->SR &= ~TIM_SR_CC1IF;
//	}

	// turn on ISR flag
	ISR_flag = 1;
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <TIM2_IRQHandler+0x34>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]

//	GPIOC->ODR ^= (1 << GPIO_ODR_OD8_Pos);
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000e38 	.word	0x20000e38

080006b8 <sysclk_init>:
	} // end while
}

// configures the system clock to be 32MHz
void sysclk_init()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b096      	sub	sp, #88	; 0x58
 80006bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f86a 	bl	80017a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f000 fa41 	bl	8000b64 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e2:	2310      	movs	r3, #16
 80006e4:	617b      	str	r3, [r7, #20]
	//RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
	#define RCC_MSIRANGE_7                 MSI = 8 MHz
	#define RCC_MSIRANGE_8                 MSI = 16 MHz
	#define RCC_MSIRANGE_9                 MSI = 24 MHz
	#define RCC_MSIRANGE_10                MSI = 32 MHz
	#define RCC_MSIRANGE_11                MSI = 48 MHz   dont use this one*/
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
 80006ee:	2301      	movs	r3, #1
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fa88 	bl	8000c10 <HAL_RCC_OscConfig>
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	603b      	str	r3, [r7, #0]
						  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000714:	463b      	mov	r3, r7
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fe55 	bl	80013c8 <HAL_RCC_ClockConfig>
}
 800071e:	bf00      	nop
 8000720:	3758      	adds	r7, #88	; 0x58
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	; 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	; 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f89a 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ec:	f7ff ffea 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f000 ffcb 	bl	80017b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fe2b 	bl	8000474 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000e1c 	.word	0x20000e1c
  ldr r2, =_sidata
 800082c:	08001864 	.word	0x08001864
  ldr r2, =_sbss
 8000830:	20000e1c 	.word	0x20000e1c
  ldr r4, =_ebss
 8000834:	20000e40 	.word	0x20000e40

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_Init+0x3c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_Init+0x3c>)
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000852:	2003      	movs	r0, #3
 8000854:	f000 f944 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f80f 	bl	800087c <HAL_InitTick>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	e001      	b.n	800086e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800086a:	f7ff ff5d 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086e:	79fb      	ldrb	r3, [r7, #7]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_InitTick+0x6c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d023      	beq.n	80008d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <HAL_InitTick+0x70>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_InitTick+0x6c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f941 	bl	8000b2e <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d10f      	bne.n	80008d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d809      	bhi.n	80008cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 f919 	bl	8000af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_InitTick+0x74>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	e007      	b.n	80008dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e004      	b.n	80008dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e001      	b.n	80008dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000e18 	.word	0x20000e18
 80008ec:	20000e10 	.word	0x20000e10
 80008f0:	20000e14 	.word	0x20000e14

080008f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x20>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x24>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_IncTick+0x24>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000e18 	.word	0x20000e18
 8000918:	20000e3c 	.word	0x20000e3c

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_GetTick+0x14>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000e3c 	.word	0x20000e3c

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff ffee 	bl	800091c <HAL_GetTick>
 8000940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095a:	bf00      	nop
 800095c:	f7ff ffde 	bl	800091c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000e18 	.word	0x20000e18

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f7ff ff8e 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff47 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff5c 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff8e 	bl	8000a34 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5d 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffb0 	bl	8000a9c <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40007000 	.word	0x40007000

08000b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b72:	d130      	bne.n	8000bd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b74:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b80:	d038      	beq.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2232      	movs	r2, #50	; 0x32
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ba8:	e002      	b.n	8000bb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bbc:	d102      	bne.n	8000bc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f2      	bne.n	8000baa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd0:	d110      	bne.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e00f      	b.n	8000bf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be2:	d007      	beq.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40007000 	.word	0x40007000
 8000c08:	20000e10 	.word	0x20000e10
 8000c0c:	431bde83 	.word	0x431bde83

08000c10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e3ca      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c22:	4b97      	ldr	r3, [pc, #604]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c2c:	4b94      	ldr	r3, [pc, #592]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80e4 	beq.w	8000e0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <HAL_RCC_OscConfig+0x4a>
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	2b0c      	cmp	r3, #12
 8000c4e:	f040 808b 	bne.w	8000d68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	f040 8087 	bne.w	8000d68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c5a:	4b89      	ldr	r3, [pc, #548]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <HAL_RCC_OscConfig+0x62>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e3a2      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1a      	ldr	r2, [r3, #32]
 8000c76:	4b82      	ldr	r3, [pc, #520]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <HAL_RCC_OscConfig+0x7c>
 8000c82:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c8a:	e005      	b.n	8000c98 <HAL_RCC_OscConfig+0x88>
 8000c8c:	4b7c      	ldr	r3, [pc, #496]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d223      	bcs.n	8000ce4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fd1d 	bl	80016e0 <RCC_SetFlashLatencyFromMSIRange>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e383      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cb0:	4b73      	ldr	r3, [pc, #460]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a72      	ldr	r2, [pc, #456]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b70      	ldr	r3, [pc, #448]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	496d      	ldr	r1, [pc, #436]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cce:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	4968      	ldr	r1, [pc, #416]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	604b      	str	r3, [r1, #4]
 8000ce2:	e025      	b.n	8000d30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ce4:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a65      	ldr	r2, [pc, #404]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	4960      	ldr	r1, [pc, #384]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d02:	4b5f      	ldr	r3, [pc, #380]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	495b      	ldr	r1, [pc, #364]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fcdd 	bl	80016e0 <RCC_SetFlashLatencyFromMSIRange>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e343      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d30:	f000 fc4a 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	4950      	ldr	r1, [pc, #320]	; (8000e84 <HAL_RCC_OscConfig+0x274>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	4a4e      	ldr	r2, [pc, #312]	; (8000e88 <HAL_RCC_OscConfig+0x278>)
 8000d4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d50:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <HAL_RCC_OscConfig+0x27c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fd91 	bl	800087c <HAL_InitTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d052      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	e327      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d032      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d70:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a42      	ldr	r2, [pc, #264]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fdce 	bl	800091c <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d84:	f7ff fdca 	bl	800091c <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e310      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	4931      	ldr	r1, [pc, #196]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	492c      	ldr	r1, [pc, #176]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	e01a      	b.n	8000e0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fd9b 	bl	800091c <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dea:	f7ff fd97 	bl	800091c <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e2dd      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f0      	bne.n	8000dea <HAL_RCC_OscConfig+0x1da>
 8000e08:	e000      	b.n	8000e0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d074      	beq.n	8000f02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d005      	beq.n	8000e2a <HAL_RCC_OscConfig+0x21a>
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d10e      	bne.n	8000e42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d10b      	bne.n	8000e42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d064      	beq.n	8000f00 <HAL_RCC_OscConfig+0x2f0>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d160      	bne.n	8000f00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e2ba      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4a:	d106      	bne.n	8000e5a <HAL_RCC_OscConfig+0x24a>
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e026      	b.n	8000ea8 <HAL_RCC_OscConfig+0x298>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e62:	d115      	bne.n	8000e90 <HAL_RCC_OscConfig+0x280>
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a02      	ldr	r2, [pc, #8]	; (8000e80 <HAL_RCC_OscConfig+0x270>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e014      	b.n	8000ea8 <HAL_RCC_OscConfig+0x298>
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	0800181c 	.word	0x0800181c
 8000e88:	20000e10 	.word	0x20000e10
 8000e8c:	20000e14 	.word	0x20000e14
 8000e90:	4ba0      	ldr	r3, [pc, #640]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a9f      	ldr	r2, [pc, #636]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b9d      	ldr	r3, [pc, #628]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a9c      	ldr	r2, [pc, #624]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d013      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fd34 	bl	800091c <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fd30 	bl	800091c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e276      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eca:	4b92      	ldr	r3, [pc, #584]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x2a8>
 8000ed6:	e014      	b.n	8000f02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fd20 	bl	800091c <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fd1c 	bl	800091c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e262      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ef2:	4b88      	ldr	r3, [pc, #544]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x2d0>
 8000efe:	e000      	b.n	8000f02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d060      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_OscConfig+0x310>
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2b0c      	cmp	r3, #12
 8000f18:	d119      	bne.n	8000f4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d116      	bne.n	8000f4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f20:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <HAL_RCC_OscConfig+0x328>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e23f      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	4b76      	ldr	r3, [pc, #472]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	061b      	lsls	r3, r3, #24
 8000f46:	4973      	ldr	r1, [pc, #460]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f4c:	e040      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d023      	beq.n	8000f9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f56:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6e      	ldr	r2, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f62:	f7ff fcdb 	bl	800091c <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fcd7 	bl	800091c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e21d      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f7c:	4b65      	ldr	r3, [pc, #404]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b62      	ldr	r3, [pc, #392]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	495f      	ldr	r1, [pc, #380]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
 8000f9c:	e018      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a5c      	ldr	r2, [pc, #368]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000faa:	f7ff fcb7 	bl	800091c <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fcb3 	bl	800091c <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1f9      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc4:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d03c      	beq.n	8001056 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01c      	beq.n	800101e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fea:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fc92 	bl	800091c <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fc8e 	bl	800091c <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e1d4      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ef      	beq.n	8000ffc <HAL_RCC_OscConfig+0x3ec>
 800101c:	e01b      	b.n	8001056 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001024:	4a3b      	ldr	r2, [pc, #236]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102e:	f7ff fc75 	bl	800091c <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001036:	f7ff fc71 	bl	800091c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e1b7      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001048:	4b32      	ldr	r3, [pc, #200]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 800104a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1ef      	bne.n	8001036 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80a6 	beq.w	80011b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10d      	bne.n	8001090 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6593      	str	r3, [r2, #88]	; 0x58
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800108c:	2301      	movs	r3, #1
 800108e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_RCC_OscConfig+0x508>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001098:	2b00      	cmp	r3, #0
 800109a:	d118      	bne.n	80010ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <HAL_RCC_OscConfig+0x508>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_RCC_OscConfig+0x508>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc38 	bl	800091c <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b0:	f7ff fc34 	bl	800091c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e17a      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_RCC_OscConfig+0x508>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_RCC_OscConfig+0x4d8>
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 80010d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010e6:	e029      	b.n	800113c <HAL_RCC_OscConfig+0x52c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d115      	bne.n	800111c <HAL_RCC_OscConfig+0x50c>
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 80010f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_RCC_OscConfig+0x504>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001110:	e014      	b.n	800113c <HAL_RCC_OscConfig+0x52c>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40007000 	.word	0x40007000
 800111c:	4b9c      	ldr	r3, [pc, #624]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a9b      	ldr	r2, [pc, #620]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112c:	4b98      	ldr	r3, [pc, #608]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001132:	4a97      	ldr	r2, [pc, #604]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d016      	beq.n	8001172 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001144:	f7ff fbea 	bl	800091c <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800114a:	e00a      	b.n	8001162 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114c:	f7ff fbe6 	bl	800091c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e12a      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001162:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ed      	beq.n	800114c <HAL_RCC_OscConfig+0x53c>
 8001170:	e015      	b.n	800119e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fbd3 	bl	800091c <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001178:	e00a      	b.n	8001190 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f7ff fbcf 	bl	800091c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f241 3288 	movw	r2, #5000	; 0x1388
 8001188:	4293      	cmp	r3, r2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e113      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001190:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ed      	bne.n	800117a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a4:	4b7a      	ldr	r3, [pc, #488]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	4a79      	ldr	r2, [pc, #484]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80011aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80fe 	beq.w	80013b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	2b02      	cmp	r3, #2
 80011c0:	f040 80d0 	bne.w	8001364 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011c4:	4b72      	ldr	r3, [pc, #456]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d130      	bne.n	800123a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	3b01      	subs	r3, #1
 80011e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d127      	bne.n	800123a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d11f      	bne.n	800123a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001204:	2a07      	cmp	r2, #7
 8001206:	bf14      	ite	ne
 8001208:	2201      	movne	r2, #1
 800120a:	2200      	moveq	r2, #0
 800120c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800120e:	4293      	cmp	r3, r2
 8001210:	d113      	bne.n	800123a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	3b01      	subs	r3, #1
 8001220:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001222:	429a      	cmp	r2, r3
 8001224:	d109      	bne.n	800123a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	3b01      	subs	r3, #1
 8001234:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d06e      	beq.n	8001318 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d069      	beq.n	8001314 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0ad      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001266:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001268:	f7ff fb58 	bl	800091c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fb54 	bl	800091c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e09a      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <HAL_RCC_OscConfig+0x784>)
 8001294:	4013      	ands	r3, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800129e:	3a01      	subs	r2, #1
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	4311      	orrs	r1, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012a8:	0212      	lsls	r2, r2, #8
 80012aa:	4311      	orrs	r1, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012b0:	0852      	lsrs	r2, r2, #1
 80012b2:	3a01      	subs	r2, #1
 80012b4:	0552      	lsls	r2, r2, #21
 80012b6:	4311      	orrs	r1, r2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012bc:	0852      	lsrs	r2, r2, #1
 80012be:	3a01      	subs	r2, #1
 80012c0:	0652      	lsls	r2, r2, #25
 80012c2:	4311      	orrs	r1, r2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012c8:	0912      	lsrs	r2, r2, #4
 80012ca:	0452      	lsls	r2, r2, #17
 80012cc:	430a      	orrs	r2, r1
 80012ce:	4930      	ldr	r1, [pc, #192]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80012da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4a2a      	ldr	r2, [pc, #168]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 80012e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012ec:	f7ff fb16 	bl	800091c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff fb12 	bl	800091c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e058      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001312:	e050      	b.n	80013b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e04f      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d148      	bne.n	80013b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800132a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800132e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a16      	ldr	r2, [pc, #88]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800133c:	f7ff faee 	bl	800091c <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff faea 	bl	800091c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e030      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x734>
 8001362:	e028      	b.n	80013b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d023      	beq.n	80013b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_RCC_OscConfig+0x780>)
 8001370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fad1 	bl	800091c <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137c:	e00c      	b.n	8001398 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff facd 	bl	800091c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d905      	bls.n	8001398 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e013      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
 8001390:	40021000 	.word	0x40021000
 8001394:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RCC_OscConfig+0x7b0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ec      	bne.n	800137e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_RCC_OscConfig+0x7b0>)
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	4905      	ldr	r1, [pc, #20]	; (80013c0 <HAL_RCC_OscConfig+0x7b0>)
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_RCC_OscConfig+0x7b4>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	60cb      	str	r3, [r1, #12]
 80013b0:	e001      	b.n	80013b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	feeefffc 	.word	0xfeeefffc

080013c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0e7      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4970      	ldr	r1, [pc, #448]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0cf      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d010      	beq.n	800143a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001424:	429a      	cmp	r2, r3
 8001426:	d908      	bls.n	800143a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4960      	ldr	r1, [pc, #384]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d04c      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144e:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d121      	bne.n	800149e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0a6      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d115      	bne.n	800149e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e09a      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147e:	4b4e      	ldr	r3, [pc, #312]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e08e      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e086      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f023 0203 	bic.w	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4943      	ldr	r1, [pc, #268]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b0:	f7ff fa34 	bl	800091c <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b8:	f7ff fa30 	bl	800091c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e06e      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 020c 	and.w	r2, r3, #12
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1eb      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d010      	beq.n	800150e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d208      	bcs.n	800150e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	492b      	ldr	r1, [pc, #172]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d210      	bcs.n	800153e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 0207 	bic.w	r2, r3, #7
 8001524:	4923      	ldr	r1, [pc, #140]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_RCC_ClockConfig+0x1ec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e036      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	4918      	ldr	r1, [pc, #96]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4910      	ldr	r1, [pc, #64]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800157c:	f000 f824 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	490b      	ldr	r1, [pc, #44]	; (80015bc <HAL_RCC_ClockConfig+0x1f4>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1f8>)
 800159a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1fc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f96b 	bl	800087c <HAL_InitTick>
 80015a6:	4603      	mov	r3, r0
 80015a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80015aa:	7afb      	ldrb	r3, [r7, #11]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	0800181c 	.word	0x0800181c
 80015c0:	20000e10 	.word	0x20000e10
 80015c4:	20000e14 	.word	0x20000e14

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x34>
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d121      	bne.n	800163a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d11e      	bne.n	800163a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e005      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001624:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d102      	bne.n	8001646 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	e004      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d101      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_RCC_GetSysClockFreq+0x114>)
 800164e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d134      	bne.n	80016c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0xa6>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d003      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0xac>
 800166c:	e005      	b.n	800167a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001670:	617b      	str	r3, [r7, #20]
      break;
 8001672:	e005      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_GetSysClockFreq+0x114>)
 8001676:	617b      	str	r3, [r7, #20]
      break;
 8001678:	e002      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	617b      	str	r3, [r7, #20]
      break;
 800167e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	3301      	adds	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	fb03 f202 	mul.w	r2, r3, r2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	0e5b      	lsrs	r3, r3, #25
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	3301      	adds	r3, #1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016c0:	69bb      	ldr	r3, [r7, #24]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	0800182c 	.word	0x0800182c
 80016d8:	00f42400 	.word	0x00f42400
 80016dc:	007a1200 	.word	0x007a1200

080016e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016f8:	f7ff fa26 	bl	8000b48 <HAL_PWREx_GetVoltageRange>
 80016fc:	6178      	str	r0, [r7, #20]
 80016fe:	e014      	b.n	800172a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001718:	f7ff fa16 	bl	8000b48 <HAL_PWREx_GetVoltageRange>
 800171c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001730:	d10b      	bne.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d919      	bls.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2ba0      	cmp	r3, #160	; 0xa0
 800173c:	d902      	bls.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800173e:	2302      	movs	r3, #2
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e013      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e010      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b80      	cmp	r3, #128	; 0x80
 800174e:	d902      	bls.n	8001756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e00a      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	d102      	bne.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e004      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b70      	cmp	r3, #112	; 0x70
 8001766:	d101      	bne.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 0207 	bic.w	r2, r3, #7
 8001774:	4909      	ldr	r1, [pc, #36]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40022000 	.word	0x40022000

080017a0 <memset>:
 80017a0:	4402      	add	r2, r0
 80017a2:	4603      	mov	r3, r0
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d100      	bne.n	80017aa <memset+0xa>
 80017a8:	4770      	bx	lr
 80017aa:	f803 1b01 	strb.w	r1, [r3], #1
 80017ae:	e7f9      	b.n	80017a4 <memset+0x4>

080017b0 <__libc_init_array>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	4d0d      	ldr	r5, [pc, #52]	; (80017e8 <__libc_init_array+0x38>)
 80017b4:	4c0d      	ldr	r4, [pc, #52]	; (80017ec <__libc_init_array+0x3c>)
 80017b6:	1b64      	subs	r4, r4, r5
 80017b8:	10a4      	asrs	r4, r4, #2
 80017ba:	2600      	movs	r6, #0
 80017bc:	42a6      	cmp	r6, r4
 80017be:	d109      	bne.n	80017d4 <__libc_init_array+0x24>
 80017c0:	4d0b      	ldr	r5, [pc, #44]	; (80017f0 <__libc_init_array+0x40>)
 80017c2:	4c0c      	ldr	r4, [pc, #48]	; (80017f4 <__libc_init_array+0x44>)
 80017c4:	f000 f818 	bl	80017f8 <_init>
 80017c8:	1b64      	subs	r4, r4, r5
 80017ca:	10a4      	asrs	r4, r4, #2
 80017cc:	2600      	movs	r6, #0
 80017ce:	42a6      	cmp	r6, r4
 80017d0:	d105      	bne.n	80017de <__libc_init_array+0x2e>
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d8:	4798      	blx	r3
 80017da:	3601      	adds	r6, #1
 80017dc:	e7ee      	b.n	80017bc <__libc_init_array+0xc>
 80017de:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e2:	4798      	blx	r3
 80017e4:	3601      	adds	r6, #1
 80017e6:	e7f2      	b.n	80017ce <__libc_init_array+0x1e>
 80017e8:	0800185c 	.word	0x0800185c
 80017ec:	0800185c 	.word	0x0800185c
 80017f0:	0800185c 	.word	0x0800185c
 80017f4:	08001860 	.word	0x08001860

080017f8 <_init>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	bf00      	nop
 80017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fe:	bc08      	pop	{r3}
 8001800:	469e      	mov	lr, r3
 8001802:	4770      	bx	lr

08001804 <_fini>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	bf00      	nop
 8001808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180a:	bc08      	pop	{r3}
 800180c:	469e      	mov	lr, r3
 800180e:	4770      	bx	lr
