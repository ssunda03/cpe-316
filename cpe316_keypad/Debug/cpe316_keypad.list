
cpe316_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000484  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000488  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000488  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000171d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f0  00000000  00000000  00021794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00021c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000170  00000000  00000000  00021e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fb6  00000000  00000000  00022000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022a8  00000000  00000000  00045fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1918  00000000  00000000  0004825e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000678  00000000  00000000  00129b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000454 	.word	0x08000454

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000454 	.word	0x08000454

080001c8 <main>:
	0xE, 0x0, 0xF, 0xD
};

int8_t keypadLoop();

int main() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int8_t button;
	uint16_t delay;

	// enable clock for port C and port B
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOBEN);
 80001ce:	4b2c      	ldr	r3, [pc, #176]	; (8000280 <main+0xb8>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d2:	4a2b      	ldr	r2, [pc, #172]	; (8000280 <main+0xb8>)
 80001d4:	f043 0306 	orr.w	r3, r3, #6
 80001d8:	64d3      	str	r3, [r2, #76]	; 0x4c

	// drive columns MODE[31:16] / ODR[7:4] and read rows MODE[15:0] / IDR[3:0]
	KB_PORT->MODER &= 0xFFFF0000;
 80001da:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <main+0xbc>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a29      	ldr	r2, [pc, #164]	; (8000284 <main+0xbc>)
 80001e0:	0c1b      	lsrs	r3, r3, #16
 80001e2:	041b      	lsls	r3, r3, #16
 80001e4:	6013      	str	r3, [r2, #0]
	KB_PORT->MODER |= 0x00005500;
 80001e6:	4b27      	ldr	r3, [pc, #156]	; (8000284 <main+0xbc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <main+0xbc>)
 80001ec:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80001f0:	6013      	str	r3, [r2, #0]

	// set LEDs MODE[7:0] / ODR[3:0] to GPIO output
	LED_PORT->MODER &= 0xFFFFFF00;
 80001f2:	4b25      	ldr	r3, [pc, #148]	; (8000288 <main+0xc0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a24      	ldr	r2, [pc, #144]	; (8000288 <main+0xc0>)
 80001f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001fc:	6013      	str	r3, [r2, #0]
	LED_PORT->MODER |= 0x00000055;
 80001fe:	4b22      	ldr	r3, [pc, #136]	; (8000288 <main+0xc0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a21      	ldr	r2, [pc, #132]	; (8000288 <main+0xc0>)
 8000204:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000208:	6013      	str	r3, [r2, #0]

	// set pull-down resistors for rows to prevent floating voltages
	KB_PORT->PUPDR &= 0xFFFFFF00;
 800020a:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <main+0xbc>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <main+0xbc>)
 8000210:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000214:	60d3      	str	r3, [r2, #12]
	KB_PORT->PUPDR |= 0x000000AA;
 8000216:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <main+0xbc>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <main+0xbc>)
 800021c:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000220:	60d3      	str	r3, [r2, #12]

	// clear LED ODR
	LED_PORT->ODR &= 0xFFFFFFF0;
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <main+0xc0>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <main+0xc0>)
 8000228:	f023 030f 	bic.w	r3, r3, #15
 800022c:	6153      	str	r3, [r2, #20]

	button = -1;
 800022e:	23ff      	movs	r3, #255	; 0xff
 8000230:	717b      	strb	r3, [r7, #5]
	while(1) {
		button = keypadLoop();
 8000232:	f000 f82d 	bl	8000290 <keypadLoop>
 8000236:	4603      	mov	r3, r0
 8000238:	717b      	strb	r3, [r7, #5]
		if (button != -1) {
 800023a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800023e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000242:	d010      	beq.n	8000266 <main+0x9e>
			LED_PORT->ODR &= 0xFFFFFFF0;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0xc0>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <main+0xc0>)
 800024a:	f023 030f 	bic.w	r3, r3, #15
 800024e:	6153      	str	r3, [r2, #20]
			LED_PORT->ODR |= 0x0F & keypadValue[button];
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0xc0>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000258:	490c      	ldr	r1, [pc, #48]	; (800028c <main+0xc4>)
 800025a:	5ccb      	ldrb	r3, [r1, r3]
 800025c:	f003 030f 	and.w	r3, r3, #15
 8000260:	4909      	ldr	r1, [pc, #36]	; (8000288 <main+0xc0>)
 8000262:	4313      	orrs	r3, r2
 8000264:	614b      	str	r3, [r1, #20]
		}
		for (delay = 0; delay < 0xFFFF; delay++);
 8000266:	2300      	movs	r3, #0
 8000268:	80fb      	strh	r3, [r7, #6]
 800026a:	e002      	b.n	8000272 <main+0xaa>
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	3301      	adds	r3, #1
 8000270:	80fb      	strh	r3, [r7, #6]
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000278:	4293      	cmp	r3, r2
 800027a:	d1f7      	bne.n	800026c <main+0xa4>
		button = keypadLoop();
 800027c:	e7d9      	b.n	8000232 <main+0x6a>
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	48000800 	.word	0x48000800
 8000288:	48000400 	.word	0x48000400
 800028c:	0800046c 	.word	0x0800046c

08000290 <keypadLoop>:
	}

	return 0;
}

int8_t keypadLoop() {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	uint8_t colShift, row;

	// clear column ODR
	KB_PORT->ODR &= 0xFFFFFF0F;
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <keypadLoop+0x84>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <keypadLoop+0x84>)
 800029c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002a0:	6153      	str	r3, [r2, #20]

	// multiplex columns
	for (colShift = 0; 1; colShift = (colShift + 1) % NUM_COL) {
 80002a2:	2300      	movs	r3, #0
 80002a4:	71fb      	strb	r3, [r7, #7]
		// drive column
		KB_PORT->BSRR = (0x10 << colShift);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2210      	movs	r2, #16
 80002aa:	409a      	lsls	r2, r3
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <keypadLoop+0x84>)
 80002ae:	619a      	str	r2, [r3, #24]

		for (row = 0; row < NUM_ROW; row++) {
 80002b0:	2300      	movs	r3, #0
 80002b2:	71bb      	strb	r3, [r7, #6]
 80002b4:	e013      	b.n	80002de <keypadLoop+0x4e>
			if (KB_PORT->IDR & (1 << row)) {
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <keypadLoop+0x84>)
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	4013      	ands	r3, r2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d007      	beq.n	80002d8 <keypadLoop+0x48>
				return NUM_ROW * row + colShift;
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4413      	add	r3, r2
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	b25b      	sxtb	r3, r3
 80002d6:	e016      	b.n	8000306 <keypadLoop+0x76>
		for (row = 0; row < NUM_ROW; row++) {
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	3301      	adds	r3, #1
 80002dc:	71bb      	strb	r3, [r7, #6]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d9e8      	bls.n	80002b6 <keypadLoop+0x26>
			}
		}

		// disable column
		KB_PORT->BSRR = (0x100000 << colShift);
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002ea:	409a      	lsls	r2, r3
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <keypadLoop+0x84>)
 80002ee:	619a      	str	r2, [r3, #24]
	for (colShift = 0; 1; colShift = (colShift + 1) % NUM_COL) {
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	3301      	adds	r3, #1
 80002f4:	425a      	negs	r2, r3
 80002f6:	f003 0303 	and.w	r3, r3, #3
 80002fa:	f002 0203 	and.w	r2, r2, #3
 80002fe:	bf58      	it	pl
 8000300:	4253      	negpl	r3, r2
 8000302:	71fb      	strb	r3, [r7, #7]
		KB_PORT->BSRR = (0x10 << colShift);
 8000304:	e7cf      	b.n	80002a6 <keypadLoop+0x16>
	}

	return -1;
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	48000800 	.word	0x48000800

08000318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800031c:	e7fe      	b.n	800031c <NMI_Handler+0x4>

0800031e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <MemManage_Handler+0x4>

0800032a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <BusFault_Handler+0x4>

08000330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler+0x4>

08000336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000364:	f000 f83e 	bl	80003e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <SystemInit+0x20>)
 8000372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <SystemInit+0x20>)
 8000378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800037c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000394:	f7ff ffea 	bl	800036c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	; (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	; (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f000 f825 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003c2:	f7ff ff01 	bl	80001c8 <main>

080003c6 <LoopForever>:

LoopForever:
    b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d4:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 80003d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003dc:	20000024 	.word	0x20000024

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_IncTick+0x20>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <HAL_IncTick+0x24>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4413      	add	r3, r2
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_IncTick+0x24>)
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000000 	.word	0x20000000
 8000408:	20000020 	.word	0x20000020

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800047c 	.word	0x0800047c
 8000448:	0800047c 	.word	0x0800047c
 800044c:	0800047c 	.word	0x0800047c
 8000450:	08000480 	.word	0x08000480

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
