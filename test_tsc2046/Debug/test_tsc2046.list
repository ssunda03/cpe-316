
test_tsc2046.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001630  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080017c0  080017c0  000117c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001840  08001840  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001840  08001840  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001840  08001840  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080018a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080018a4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003d42  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d07  00000000  00000000  00023e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000410  00000000  00000000  00024b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ec  00000000  00000000  00024f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509e  00000000  00000000  00025214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003ea3  00000000  00000000  0004a2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e616e  00000000  00000000  0004e155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013d0  00000000  00000000  001342c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00135694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080017a8 	.word	0x080017a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080017a8 	.word	0x080017a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <USART_init>:
void USART_Escape_Code(const char* msg);
void USART_init();


void USART_init()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	// configure GPIO pins for USART2 (PA2, PA3) follow order of configuring registers
	// AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000274:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <USART_init+0xb8>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a2b      	ldr	r2, [pc, #172]	; (8000328 <USART_init+0xb8>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);		// mask AF selection
 8000280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000284:	6a1b      	ldr	r3, [r3, #32]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800028e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |			// select USART2 (AF7)
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	6a1b      	ldr	r3, [r3, #32]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800029e:	6213      	str	r3, [r2, #32]
				   (7 << GPIO_AFRL_AFSEL3_Pos));

	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);	// enable alternate function
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);    // for PA2 and PA3
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002be:	6013      	str	r3, [r2, #0]

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;	// enable USART by turning on system clock
 80002c0:	4b19      	ldr	r3, [pc, #100]	; (8000328 <USART_init+0xb8>)
 80002c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <USART_init+0xb8>)
 80002c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ca:	6593      	str	r3, [r2, #88]	; 0x58

	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);	// set data to 8 bits
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <USART_init+0xbc>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a16      	ldr	r2, [pc, #88]	; (800032c <USART_init+0xbc>)
 80002d2:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80002d6:	6013      	str	r3, [r2, #0]
	USART2->BRR = F_CLK / 115200;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <USART_init+0xbc>)
 80002da:	2222      	movs	r2, #34	; 0x22
 80002dc:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);		// enable transmit and receive for USART
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <USART_init+0xbc>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a12      	ldr	r2, [pc, #72]	; (800032c <USART_init+0xbc>)
 80002e4:	f043 030c 	orr.w	r3, r3, #12
 80002e8:	6013      	str	r3, [r2, #0]

	// enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;			// enable RXNE interrupt on USART2
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <USART_init+0xbc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a0f      	ldr	r2, [pc, #60]	; (800032c <USART_init+0xbc>)
 80002f0:	f043 0320 	orr.w	r3, r3, #32
 80002f4:	6013      	str	r3, [r2, #0]

	USART2->ISR &= ~(USART_ISR_RXNE);			// clear interrupt flag while (message[i] != 0)
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <USART_init+0xbc>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	4a0c      	ldr	r2, [pc, #48]	; (800032c <USART_init+0xbc>)
 80002fc:	f023 0320 	bic.w	r3, r3, #32
 8000300:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <USART_init+0xc0>)
 8000304:	2240      	movs	r2, #64	; 0x40
 8000306:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000308:	b662      	cpsie	i
}
 800030a:	bf00      	nop

	__enable_irq();

	USART2->CR1 |= USART_CR1_UE;			// enable USART
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <USART_init+0xbc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <USART_init+0xbc>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6013      	str	r3, [r2, #0]


	// clear screen
	USART_Escape_Code("[2J");
 8000318:	4806      	ldr	r0, [pc, #24]	; (8000334 <USART_init+0xc4>)
 800031a:	f000 f837 	bl	800038c <USART_Escape_Code>
	// top left cursor
	USART_Escape_Code("[H");
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <USART_init+0xc8>)
 8000320:	f000 f834 	bl	800038c <USART_Escape_Code>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	40004400 	.word	0x40004400
 8000330:	e000e100 	.word	0xe000e100
 8000334:	080017c0 	.word	0x080017c0
 8000338:	080017c4 	.word	0x080017c4

0800033c <USART_Print>:

// use a for loop to output one byte at a time to TDR
void USART_Print(const char* message)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
 8000348:	e010      	b.n	800036c <USART_Print+0x30>
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 800034a:	bf00      	nop
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <USART_Print+0x4c>)
 800034e:	69db      	ldr	r3, [r3, #28]
 8000350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <USART_Print+0x10>
		USART2->TDR = message[i];				// transmit character to USART
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <USART_Print+0x4c>)
 8000362:	b292      	uxth	r2, r2
 8000364:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	3301      	adds	r3, #1
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1e8      	bne.n	800034a <USART_Print+0xe>
	}
}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40004400 	.word	0x40004400

0800038c <USART_Escape_Code>:

// add /ESC to TDR before the actual escape code
void USART_Escape_Code(const char* msg)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 8000394:	bf00      	nop
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <USART_Escape_Code+0x2c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f9      	beq.n	8000396 <USART_Escape_Code+0xa>
	USART2->TDR = 0x1B;
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <USART_Escape_Code+0x2c>)
 80003a4:	221b      	movs	r2, #27
 80003a6:	851a      	strh	r2, [r3, #40]	; 0x28
	USART_Print(msg);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ffc7 	bl	800033c <USART_Print>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40004400 	.word	0x40004400

080003bc <USART2_IRQHandler>:

// uses the corresponding color escape code or just prints out character
// enter adds \n after the \r it defaults to
void USART2_IRQHandler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	if (USART2->ISR & USART_ISR_RXNE)
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <USART2_IRQHandler+0x28>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d005      	beq.n	80003d8 <USART2_IRQHandler+0x1c>
//		// writes to the serial display
//		while(!(USART2->ISR & USART_ISR_TXE));
//			USART2->TDR = USART2->RDR;

		// clears the flag
		USART2->ISR &= ~(USART_ISR_RXNE);
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <USART2_IRQHandler+0x28>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <USART2_IRQHandler+0x28>)
 80003d2:	f023 0320 	bic.w	r3, r3, #32
 80003d6:	61d3      	str	r3, [r2, #28]
	}
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40004400 	.word	0x40004400

080003e8 <main>:
volatile uint8_t screen_touched = 0;



int main()
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ee:	f000 fba5 	bl	8000b3c <HAL_Init>

	// initialize the TSC2046 pins
	TSC_init();
 80003f2:	f000 fa81 	bl	80008f8 <TSC_init>

	// initialize the UART connection with a clear screen and cursor top left
	USART_init();
 80003f6:	f7ff ff3b 	bl	8000270 <USART_init>

	// prints "hello" to the USART interface
	USART_Print("hello there\n\r");
 80003fa:	4830      	ldr	r0, [pc, #192]	; (80004bc <main+0xd4>)
 80003fc:	f7ff ff9e 	bl	800033c <USART_Print>
//	USART_Print("there\n\r");


	// initialize the LEDs
	PA8_LED_init(); // this is the RED LED
 8000400:	f000 f8b8 	bl	8000574 <PA8_LED_init>
	PA9_LED_init(); // this is the YELLOW LED
 8000404:	f000 f88e 	bl	8000524 <PA9_LED_init>

	// variables
	TSpoint pt = {.x = 0, .y = 0, .z = 0};
 8000408:	2300      	movs	r3, #0
 800040a:	823b      	strh	r3, [r7, #16]
 800040c:	2300      	movs	r3, #0
 800040e:	827b      	strh	r3, [r7, #18]
 8000410:	f04f 0300 	mov.w	r3, #0
 8000414:	617b      	str	r3, [r7, #20]


	while(1)
	{
		// prints the x coordinate of the touch
		int_to_str(pt.x, buff);
 8000416:	8a3b      	ldrh	r3, [r7, #16]
 8000418:	461a      	mov	r2, r3
 800041a:	463b      	mov	r3, r7
 800041c:	4619      	mov	r1, r3
 800041e:	4610      	mov	r0, r2
 8000420:	f000 f86e 	bl	8000500 <int_to_str>
		USART_Print("  x: ");
 8000424:	4826      	ldr	r0, [pc, #152]	; (80004c0 <main+0xd8>)
 8000426:	f7ff ff89 	bl	800033c <USART_Print>
		USART_Print(buff);
 800042a:	463b      	mov	r3, r7
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff85 	bl	800033c <USART_Print>

		// prints the y coordinate of the touch
		int_to_str(pt.y, buff);
 8000432:	8a7b      	ldrh	r3, [r7, #18]
 8000434:	461a      	mov	r2, r3
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 f860 	bl	8000500 <int_to_str>
		USART_Print("  y: ");
 8000440:	4820      	ldr	r0, [pc, #128]	; (80004c4 <main+0xdc>)
 8000442:	f7ff ff7b 	bl	800033c <USART_Print>
		USART_Print(buff);
 8000446:	463b      	mov	r3, r7
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff77 	bl	800033c <USART_Print>

		// prints the z (pressure) coordinate of the touch
		int_to_str(pt.z, buff);
 800044e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	ee17 0a90 	vmov	r0, s15
 800045e:	f000 f84f 	bl	8000500 <int_to_str>
		USART_Print("  z: ");
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <main+0xe0>)
 8000464:	f7ff ff6a 	bl	800033c <USART_Print>
		USART_Print(buff);
 8000468:	463b      	mov	r3, r7
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff66 	bl	800033c <USART_Print>

		// prints the global touch flag set by the /PENIRQ interrupt
		int_to_str(screen_touched, buff);
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <main+0xe4>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4610      	mov	r0, r2
 800047e:	f000 f83f 	bl	8000500 <int_to_str>
		USART_Print("  touch: ");
 8000482:	4813      	ldr	r0, [pc, #76]	; (80004d0 <main+0xe8>)
 8000484:	f7ff ff5a 	bl	800033c <USART_Print>
		USART_Print(buff);
 8000488:	463b      	mov	r3, r7
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff56 	bl	800033c <USART_Print>
		USART_Print("\n\r");
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <main+0xec>)
 8000492:	f7ff ff53 	bl	800033c <USART_Print>

		HAL_Delay(1000);
 8000496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049a:	f000 fbcb 	bl	8000c34 <HAL_Delay>

		if(screen_touched) // putting this here resulted in touch always = 1, meaning the get_point function is causing the interrupt somehow
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <main+0xe4>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <main+0xc6>
		{
			screen_touched = 0;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <main+0xe4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
		}

		// gets the current point from the screen
		pt = get_point();
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f886 	bl	80005c4 <get_point>
		int_to_str(pt.x, buff);
 80004b8:	e7ad      	b.n	8000416 <main+0x2e>
 80004ba:	bf00      	nop
 80004bc:	080017c8 	.word	0x080017c8
 80004c0:	080017d8 	.word	0x080017d8
 80004c4:	080017e0 	.word	0x080017e0
 80004c8:	080017e8 	.word	0x080017e8
 80004cc:	20000078 	.word	0x20000078
 80004d0:	080017f0 	.word	0x080017f0
 80004d4:	080017fc 	.word	0x080017fc

080004d8 <USART_print_int>:
	return 0;
}

// prints an integer over USART
void USART_print_int(int num)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	char buff[BUFF_SIZE];
	int_to_str(num, buff);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 f80a 	bl	8000500 <int_to_str>
	USART_Print(buff);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff23 	bl	800033c <USART_Print>
}
 80004f6:	bf00      	nop
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <int_to_str>:

// converts and int and returns a string of length 8
void int_to_str(int num, char* buff)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	snprintf(buff, /*sizeof(buff)*/BUFF_SIZE, "%d", num);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <int_to_str+0x20>)
 800050e:	2110      	movs	r1, #16
 8000510:	6838      	ldr	r0, [r7, #0]
 8000512:	f000 fc99 	bl	8000e48 <sniprintf>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	08001800 	.word	0x08001800

08000524 <PA9_LED_init>:
		GPIOA->ODR &= ~(1 << 8);
}

// initializes a GPIO output on pin PA9
void PA9_LED_init()
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	// enable GPIOA clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <PA9_LED_init+0x4c>)
 800052a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <PA9_LED_init+0x4c>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	64d3      	str	r3, [r2, #76]	; 0x4c

	// set GPIO mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE9);
 8000534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000542:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE9_0);
 8000544:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000552:	6013      	str	r3, [r2, #0]

	// initialize output to be off
	GPIOA->ODR &= ~(1 << 9);
 8000554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800055e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000562:	6153      	str	r3, [r2, #20]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <PA8_LED_init>:

// initializes a GPIO output on pin PA8
void PA8_LED_init()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	// enable GPIOA clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <PA8_LED_init+0x4c>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <PA8_LED_init+0x4c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	64d3      	str	r3, [r2, #76]	; 0x4c

	// set GPIO mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE8);
 8000584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000592:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE8_0);
 8000594:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a2:	6013      	str	r3, [r2, #0]

	// initialize output to be off
	GPIOA->ODR &= ~(1 << 8);
 80005a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b2:	6153      	str	r3, [r2, #20]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <get_point>:
	return pt.z < THRESHOLD && pt.z != 0;
}

// returns a point struct of the measured values from TSC2046
TSpoint get_point()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	// DISABLE INTERRUPTS
	disable_NVIC_interrupt(EXTI0_IRQn);
 80005cc:	2006      	movs	r0, #6
 80005ce:	f000 f973 	bl	80008b8 <disable_NVIC_interrupt>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
}
 80005d4:	bf00      	nop
	__disable_irq();

	uint16_t x = read_coordinate(X_ADDR_BITS);
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 f84e 	bl	8000678 <read_coordinate>
 80005dc:	4603      	mov	r3, r0
 80005de:	83fb      	strh	r3, [r7, #30]
	uint16_t y = read_coordinate(Y_ADDR_BITS);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f849 	bl	8000678 <read_coordinate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	83bb      	strh	r3, [r7, #28]
	uint16_t z1 = read_coordinate(Z1_ADDR_BITS);
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 f844 	bl	8000678 <read_coordinate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	837b      	strh	r3, [r7, #26]
	uint16_t z2 = read_coordinate(Z2_ADDR_BITS);
 80005f4:	2004      	movs	r0, #4
 80005f6:	f000 f83f 	bl	8000678 <read_coordinate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	833b      	strh	r3, [r7, #24]

	// ENABLE INTERRUPTS
	enable_NVIC_interrupt(EXTI0_IRQn);
 80005fe:	2006      	movs	r0, #6
 8000600:	f000 f93e 	bl	8000880 <enable_NVIC_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 8000604:	b662      	cpsie	i
}
 8000606:	bf00      	nop
	__enable_irq();

	float z_pressure
		= X_RESISTANCE * ((float)x / 4096.f) * ((float)z2 / (float)z1 - 1.f);
 8000608:	8bfb      	ldrh	r3, [r7, #30]
 800060a:	ee07 3a90 	vmov	s15, r3
 800060e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000612:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000670 <get_point+0xac>
 8000616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800061a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000674 <get_point+0xb0>
 800061e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000622:	8b3b      	ldrh	r3, [r7, #24]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800062c:	8b7b      	ldrh	r3, [r7, #26]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000636:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800063a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800063e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float z_pressure
 8000642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000646:	edc7 7a05 	vstr	s15, [r7, #20]

	TSpoint pt;
	pt.x = x;
 800064a:	8bfb      	ldrh	r3, [r7, #30]
 800064c:	81bb      	strh	r3, [r7, #12]
	pt.y = y;
 800064e:	8bbb      	ldrh	r3, [r7, #28]
 8000650:	81fb      	strh	r3, [r7, #14]
	pt.z = z_pressure;
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	613b      	str	r3, [r7, #16]

	return pt;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	461a      	mov	r2, r3
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000662:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	45800000 	.word	0x45800000
 8000674:	43c80000 	.word	0x43c80000

08000678 <read_coordinate>:

// makes the control byte from the input coordinate and returns the TSC output
uint16_t read_coordinate(uint8_t coord)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	// variables
	uint8_t ctrl = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_bits = coord << 4;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	73bb      	strb	r3, [r7, #14]
	// set start bit high
	ctrl |= 0x80;
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000692:	73fb      	strb	r3, [r7, #15]

//	USART_print_int(ctrl);
//	USART_Print(" - ");

	// add address bits to control byte
	ctrl |= addr_bits;
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	4313      	orrs	r3, r2
 800069a:	73fb      	strb	r3, [r7, #15]

//	USART_print_int(ctrl);
//	USART_Print(" - ");

	// set mode bit low for 12-bit ADC resolution
	ctrl &= ~(1 << 3);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	f023 0308 	bic.w	r3, r3, #8
 80006a2:	73fb      	strb	r3, [r7, #15]
//	// set SER/DFR bit low for differential reference for ADC
//	ctrl &= ~(1 << 2);
	// set SER/DFR bit high for single-ended mode for ADC
	ctrl |= (1 << 2);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	73fb      	strb	r3, [r7, #15]
	// sets power down bits low to enable interrupt and conversions with internal reference
	ctrl &= ~(3);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	73fb      	strb	r3, [r7, #15]
//	// prints the control byte over USART
//	USART_print_int(ctrl);
//	USART_Print(" ");

	// returns the device output from this control byte
	return TSC_conversion(ctrl);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f806 	bl	80006c8 <TSC_conversion>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <TSC_conversion>:

// based on the control byte, returns the TSC output value
uint16_t TSC_conversion(uint8_t control_byte)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	// variables
	uint8_t data[2];
	uint16_t combined = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	81fb      	strh	r3, [r7, #14]

	// sends control byte
	write_byte(control_byte);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f861 	bl	80007a0 <write_byte>

	// read data from device
	data[0] = read_byte(0); // reads the MSB
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f83c 	bl	800075c <read_byte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	733b      	strb	r3, [r7, #12]
	data[1] = read_byte(0); // reads the LSB
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 f837 	bl	800075c <read_byte>
 80006ee:	4603      	mov	r3, r0
 80006f0:	737b      	strb	r3, [r7, #13]

	USART_print_int(data[0]);
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff feef 	bl	80004d8 <USART_print_int>
	USART_Print("-");
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <TSC_conversion+0x8c>)
 80006fc:	f7ff fe1e 	bl	800033c <USART_Print>

	USART_print_int(data[1]);
 8000700:	7b7b      	ldrb	r3, [r7, #13]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fee8 	bl	80004d8 <USART_print_int>
	USART_Print("-");
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <TSC_conversion+0x8c>)
 800070a:	f7ff fe17 	bl	800033c <USART_Print>

	// combine the data read
	combined |= (((uint16_t)data[0]) << 8);	// adds the MSB
 800070e:	7b3b      	ldrb	r3, [r7, #12]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b21a      	sxth	r2, r3
 8000714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000718:	4313      	orrs	r3, r2
 800071a:	b21b      	sxth	r3, r3
 800071c:	81fb      	strh	r3, [r7, #14]
	combined |= ((uint16_t)data[1]);		// adds the LSB
 800071e:	7b7b      	ldrb	r3, [r7, #13]
 8000720:	b29a      	uxth	r2, r3
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	4313      	orrs	r3, r2
 8000726:	81fb      	strh	r3, [r7, #14]

	USART_print_int(combined);
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fed4 	bl	80004d8 <USART_print_int>
	USART_Print("-");
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <TSC_conversion+0x8c>)
 8000732:	f7ff fe03 	bl	800033c <USART_Print>

	// adjusts combined for alignment
	combined = ((combined >> 3) );// & 0x0FFF);
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	81fb      	strh	r3, [r7, #14]

	USART_print_int(combined);
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff feca 	bl	80004d8 <USART_print_int>
	USART_Print(" ");
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <TSC_conversion+0x90>)
 8000746:	f7ff fdf9 	bl	800033c <USART_Print>

	// returns the combined reads
	return combined;
 800074a:	89fb      	ldrh	r3, [r7, #14]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08001804 	.word	0x08001804
 8000758:	08001808 	.word	0x08001808

0800075c <read_byte>:

// reads a byte from SPI using the dummy value to initiate
uint8_t read_byte(uint8_t dummy_val)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	// variables
	uint8_t data;

	// dummy write then read
	while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
 8000766:	bf00      	nop
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <read_byte+0x40>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f9      	beq.n	8000768 <read_byte+0xc>
	SPI1->DR = dummy_val;
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <read_byte+0x40>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); 		// wait to receive 8-bits
 800077a:	bf00      	nop
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <read_byte+0x40>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0f9      	beq.n	800077c <read_byte+0x20>
	data = SPI1->DR;						// clear RX FIFO
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <read_byte+0x40>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	73fb      	strb	r3, [r7, #15]

	// returns byte read
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40013000 	.word	0x40013000

080007a0 <write_byte>:

// writes a byte to SPI
void write_byte(uint8_t data)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));		// ensure room in TXFIFO before writing
 80007aa:	bf00      	nop
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <write_byte+0x2c>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f9      	beq.n	80007ac <write_byte+0xc>
	SPI1->DR = data;
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <write_byte+0x2c>)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	60d3      	str	r3, [r2, #12]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40013000 	.word	0x40013000

080007d0 <EXTI0_IRQHandler>:

// EXTI0 interrupt handler
void EXTI0_IRQHandler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    // Check if the interrupt was triggered by EXTI0
    if (EXTI->PR1 & EXTI_PR1_PIF0)
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <EXTI0_IRQHandler+0x2c>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d008      	beq.n	80007f2 <EXTI0_IRQHandler+0x22>
    {
    	// set the flag for the while loop to get a conversion
        screen_touched = 1;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <EXTI0_IRQHandler+0x30>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]

        // clear the interrupt flag
        EXTI->PR1 |= EXTI_PR1_PIF0;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <EXTI0_IRQHandler+0x2c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <EXTI0_IRQHandler+0x2c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6153      	str	r3, [r2, #20]
    }
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40010400 	.word	0x40010400
 8000800:	20000078 	.word	0x20000078

08000804 <TSC_EXTI_interrupt_init>:

// initializes the EXTI interrupt for the /PENIRQ pin to be connected to PA0
void TSC_EXTI_interrupt_init()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	 * /PENIRQ has a pull up resistor, and indicates the interrupt when the pin goes low
	 * 		configure PA0 as an input with pull up resistor
	 */

	// enable the GPIOA peripheral clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <TSC_EXTI_interrupt_init+0x70>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <TSC_EXTI_interrupt_init+0x70>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	64d3      	str	r3, [r2, #76]	; 0x4c

	// configure PA0 as an input with pull-up
	GPIOA->MODER &= ~GPIO_MODER_MODE0; 	// sets to input
 8000814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800081e:	f023 0303 	bic.w	r3, r3, #3
 8000822:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD0;	// sets to no pull-up and no pull-down
 8000824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800082e:	f023 0303 	bic.w	r3, r3, #3
 8000832:	60d3      	str	r3, [r2, #12]
//	GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0; // sets to have a pull-up

	// enable the SYSCFG peripheral clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <TSC_EXTI_interrupt_init+0x70>)
 8000836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <TSC_EXTI_interrupt_init+0x70>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6613      	str	r3, [r2, #96]	; 0x60

	// Connect EXTI0 line to PA0
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_Msk;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <TSC_EXTI_interrupt_init+0x74>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <TSC_EXTI_interrupt_init+0x74>)
 8000846:	f023 0307 	bic.w	r3, r3, #7
 800084a:	6093      	str	r3, [r2, #8]

	// configure EXTI0 to trigger on falling edge
	EXTI->FTSR1 |= EXTI_FTSR1_FT0;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <TSC_EXTI_interrupt_init+0x78>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <TSC_EXTI_interrupt_init+0x78>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	60d3      	str	r3, [r2, #12]

	// enable EXTI0 interrupt
	EXTI->IMR1 |= EXTI_IMR1_IM0;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <TSC_EXTI_interrupt_init+0x78>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <TSC_EXTI_interrupt_init+0x78>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6013      	str	r3, [r2, #0]

	// enable EXTI0 interrupt in NVIC
//	NVIC_EnableIRQ(EXTI0_IRQn); // does same thing as below
//	NVIC->ISER[0] |= (1 << (EXTI0_IRQn & 0x7)); // does the same thing as below
	enable_NVIC_interrupt(EXTI0_IRQn);
 8000864:	2006      	movs	r0, #6
 8000866:	f000 f80b 	bl	8000880 <enable_NVIC_interrupt>
  __ASM volatile ("cpsie i" : : : "memory");
 800086a:	b662      	cpsie	i
}
 800086c:	bf00      	nop


	// enable arm interrupts
	__enable_irq();
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40010000 	.word	0x40010000
 800087c:	40010400 	.word	0x40010400

08000880 <enable_NVIC_interrupt>:

// enables the NVIC interrupt for the input interrupt number
void enable_NVIC_interrupt(uint32_t interrupt_num)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	NVIC->ISER[interrupt_num / 32] |= (1 << (interrupt_num % 32));
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <enable_NVIC_interrupt+0x34>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	095b      	lsrs	r3, r3, #5
 800088e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f001 011f 	and.w	r1, r1, #31
 8000898:	2001      	movs	r0, #1
 800089a:	fa00 f101 	lsl.w	r1, r0, r1
 800089e:	4608      	mov	r0, r1
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <enable_NVIC_interrupt+0x34>)
 80008a2:	4302      	orrs	r2, r0
 80008a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <disable_NVIC_interrupt>:

// disables the NVIC interrupt for the input interrupt number
void disable_NVIC_interrupt(uint32_t interrupt_num)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	NVIC->ICER[interrupt_num / 32] |= (1 << (interrupt_num % 32));
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <disable_NVIC_interrupt+0x3c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	095b      	lsrs	r3, r3, #5
 80008c6:	f103 0220 	add.w	r2, r3, #32
 80008ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f001 011f 	and.w	r1, r1, #31
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f101 	lsl.w	r1, r0, r1
 80008da:	4608      	mov	r0, r1
 80008dc:	4905      	ldr	r1, [pc, #20]	; (80008f4 <disable_NVIC_interrupt+0x3c>)
 80008de:	4302      	orrs	r2, r0
 80008e0:	3320      	adds	r3, #32
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <TSC_init>:

// initializes the pins for TSC2046 device
void TSC_init()
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	* Configure TSC Pins		PA4 - SPI_1_NSS		PA5 - SPI_1_SCK
	* 							PA6 - SPI_1_MISO	PA7 - SPI_1_MOSI
	* follow order of configuring registers AFR, OTYPER, PUPDR, OSPEEDR, MODDER
	* to avoid a glitch is created on the output pin
	*/
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <TSC_init+0xbc>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <TSC_init+0xbc>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 |	// mask AF selection
 8000908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800090c:	6a1b      	ldr	r3, [r3, #32]
 800090e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000912:	b29b      	uxth	r3, r3
 8000914:	6213      	str	r3, [r2, #32]
					  GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
	GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) |				// select SPI_1 (AF5)
 8000916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000920:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000924:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000928:	6213      	str	r3, [r2, #32]
					(5 << GPIO_AFRL_AFSEL5_Pos) |
					(5 << GPIO_AFRL_AFSEL6_Pos) |
					(5 << GPIO_AFRL_AFSEL7_Pos));
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 |		// push-pull output
 800092a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000938:	6053      	str	r3, [r2, #4]
					  GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 |		// no pull ups or pull downs
 800093a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000944:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000948:	60d3      	str	r3, [r2, #12]
					GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | 					// low speed
 800094a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000958:	6093      	str	r3, [r2, #8]
					  GPIO_OSPEEDR_OSPEED5 |
					  GPIO_OSPEEDR_OSPEED6 |
					  GPIO_OSPEEDR_OSPEED7);
	GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 |		// mask function
 800095a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000964:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000968:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |	// enable alternate function
 800096a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000974:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000978:	6013      	str	r3, [r2, #0]
				   GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);

	// configure SPI 1
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);	// enable SPI1 clock
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <TSC_init+0xbc>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <TSC_init+0xbc>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
	SPI1->CR1 = (SPI_CR1_MSTR);				// enable master mode, fck/2, hardware CS, MSB first, full duplex
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <TSC_init+0xc0>)
 8000988:	2204      	movs	r2, #4
 800098a:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~(SPI_CR1_CPHA | 			// CPHA = 0
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <TSC_init+0xc0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <TSC_init+0xc0>)
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	6013      	str	r3, [r2, #0]
				SPI_CR1_CPOL); 				// CPOL = 0
	SPI1->CR2 = (SPI_CR2_SSOE |				// enable CS output
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <TSC_init+0xc0>)
 800099a:	f240 720c 	movw	r2, #1804	; 0x70c
 800099e:	605a      	str	r2, [r3, #4]
			   SPI_CR2_NSSP |				// create CS pulse
			   (0x7 << SPI_CR2_DS_Pos));	// 8-bit data frames
	SPI1->CR1 |= (SPI_CR1_SPE);				// enable SPI
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <TSC_init+0xc0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <TSC_init+0xc0>)
 80009a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009aa:	6013      	str	r3, [r2, #0]

	// enables the EXTI GPIO pin interrupt on PA0
	TSC_EXTI_interrupt_init();
 80009ac:	f7ff ff2a 	bl	8000804 <TSC_EXTI_interrupt_init>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40013000 	.word	0x40013000

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_MspInit+0x44>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6613      	str	r3, [r2, #96]	; 0x60
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x44>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6593      	str	r3, [r2, #88]	; 0x58
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f8d0 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f000 fa12 	bl	8000eb0 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20018000 	.word	0x20018000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	2000007c 	.word	0x2000007c
 8000ac0:	200001d0 	.word	0x200001d0

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f000 f9d1 	bl	8000ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fc65 	bl	80003e8 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b2c:	08001848 	.word	0x08001848
  ldr r2, =_sbss
 8000b30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b34:	200001cc 	.word	0x200001cc

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_Init+0x3c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_Init+0x3c>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b52:	2003      	movs	r0, #3
 8000b54:	f000 f944 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f80f 	bl	8000b7c <HAL_InitTick>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	e001      	b.n	8000b6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6a:	f7ff ff27 	bl	80009bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_InitTick+0x70>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f941 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d809      	bhi.n	8000bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 f919 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0x74>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e007      	b.n	8000bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e004      	b.n	8000bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e001      	b.n	8000bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000080 	.word	0x20000080

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000080 	.word	0x20000080

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff47 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff5c 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffb0 	bl	8000d9c <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <sniprintf>:
 8000e48:	b40c      	push	{r2, r3}
 8000e4a:	b530      	push	{r4, r5, lr}
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <sniprintf+0x64>)
 8000e4e:	1e0c      	subs	r4, r1, #0
 8000e50:	681d      	ldr	r5, [r3, #0]
 8000e52:	b09d      	sub	sp, #116	; 0x74
 8000e54:	da08      	bge.n	8000e68 <sniprintf+0x20>
 8000e56:	238b      	movs	r3, #139	; 0x8b
 8000e58:	602b      	str	r3, [r5, #0]
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5e:	b01d      	add	sp, #116	; 0x74
 8000e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e64:	b002      	add	sp, #8
 8000e66:	4770      	bx	lr
 8000e68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000e6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000e70:	bf14      	ite	ne
 8000e72:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8000e76:	4623      	moveq	r3, r4
 8000e78:	9304      	str	r3, [sp, #16]
 8000e7a:	9307      	str	r3, [sp, #28]
 8000e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e80:	9002      	str	r0, [sp, #8]
 8000e82:	9006      	str	r0, [sp, #24]
 8000e84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000e88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000e8a:	ab21      	add	r3, sp, #132	; 0x84
 8000e8c:	a902      	add	r1, sp, #8
 8000e8e:	4628      	mov	r0, r5
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	f000 f893 	bl	8000fbc <_svfiprintf_r>
 8000e96:	1c43      	adds	r3, r0, #1
 8000e98:	bfbc      	itt	lt
 8000e9a:	238b      	movlt	r3, #139	; 0x8b
 8000e9c:	602b      	strlt	r3, [r5, #0]
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d0dd      	beq.n	8000e5e <sniprintf+0x16>
 8000ea2:	9b02      	ldr	r3, [sp, #8]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e7d9      	b.n	8000e5e <sniprintf+0x16>
 8000eaa:	bf00      	nop
 8000eac:	20000058 	.word	0x20000058

08000eb0 <__errno>:
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <__errno+0x8>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000058 	.word	0x20000058

08000ebc <__libc_init_array>:
 8000ebc:	b570      	push	{r4, r5, r6, lr}
 8000ebe:	4d0d      	ldr	r5, [pc, #52]	; (8000ef4 <__libc_init_array+0x38>)
 8000ec0:	4c0d      	ldr	r4, [pc, #52]	; (8000ef8 <__libc_init_array+0x3c>)
 8000ec2:	1b64      	subs	r4, r4, r5
 8000ec4:	10a4      	asrs	r4, r4, #2
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	42a6      	cmp	r6, r4
 8000eca:	d109      	bne.n	8000ee0 <__libc_init_array+0x24>
 8000ecc:	4d0b      	ldr	r5, [pc, #44]	; (8000efc <__libc_init_array+0x40>)
 8000ece:	4c0c      	ldr	r4, [pc, #48]	; (8000f00 <__libc_init_array+0x44>)
 8000ed0:	f000 fc6a 	bl	80017a8 <_init>
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	10a4      	asrs	r4, r4, #2
 8000ed8:	2600      	movs	r6, #0
 8000eda:	42a6      	cmp	r6, r4
 8000edc:	d105      	bne.n	8000eea <__libc_init_array+0x2e>
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
 8000ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee4:	4798      	blx	r3
 8000ee6:	3601      	adds	r6, #1
 8000ee8:	e7ee      	b.n	8000ec8 <__libc_init_array+0xc>
 8000eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eee:	4798      	blx	r3
 8000ef0:	3601      	adds	r6, #1
 8000ef2:	e7f2      	b.n	8000eda <__libc_init_array+0x1e>
 8000ef4:	08001840 	.word	0x08001840
 8000ef8:	08001840 	.word	0x08001840
 8000efc:	08001840 	.word	0x08001840
 8000f00:	08001844 	.word	0x08001844

08000f04 <__retarget_lock_acquire_recursive>:
 8000f04:	4770      	bx	lr

08000f06 <__retarget_lock_release_recursive>:
 8000f06:	4770      	bx	lr

08000f08 <__ssputs_r>:
 8000f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f0c:	688e      	ldr	r6, [r1, #8]
 8000f0e:	461f      	mov	r7, r3
 8000f10:	42be      	cmp	r6, r7
 8000f12:	680b      	ldr	r3, [r1, #0]
 8000f14:	4682      	mov	sl, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	4690      	mov	r8, r2
 8000f1a:	d82c      	bhi.n	8000f76 <__ssputs_r+0x6e>
 8000f1c:	898a      	ldrh	r2, [r1, #12]
 8000f1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f22:	d026      	beq.n	8000f72 <__ssputs_r+0x6a>
 8000f24:	6965      	ldr	r5, [r4, #20]
 8000f26:	6909      	ldr	r1, [r1, #16]
 8000f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f2c:	eba3 0901 	sub.w	r9, r3, r1
 8000f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000f34:	1c7b      	adds	r3, r7, #1
 8000f36:	444b      	add	r3, r9
 8000f38:	106d      	asrs	r5, r5, #1
 8000f3a:	429d      	cmp	r5, r3
 8000f3c:	bf38      	it	cc
 8000f3e:	461d      	movcc	r5, r3
 8000f40:	0553      	lsls	r3, r2, #21
 8000f42:	d527      	bpl.n	8000f94 <__ssputs_r+0x8c>
 8000f44:	4629      	mov	r1, r5
 8000f46:	f000 f957 	bl	80011f8 <_malloc_r>
 8000f4a:	4606      	mov	r6, r0
 8000f4c:	b360      	cbz	r0, 8000fa8 <__ssputs_r+0xa0>
 8000f4e:	6921      	ldr	r1, [r4, #16]
 8000f50:	464a      	mov	r2, r9
 8000f52:	f000 fbc7 	bl	80016e4 <memcpy>
 8000f56:	89a3      	ldrh	r3, [r4, #12]
 8000f58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	81a3      	strh	r3, [r4, #12]
 8000f62:	6126      	str	r6, [r4, #16]
 8000f64:	6165      	str	r5, [r4, #20]
 8000f66:	444e      	add	r6, r9
 8000f68:	eba5 0509 	sub.w	r5, r5, r9
 8000f6c:	6026      	str	r6, [r4, #0]
 8000f6e:	60a5      	str	r5, [r4, #8]
 8000f70:	463e      	mov	r6, r7
 8000f72:	42be      	cmp	r6, r7
 8000f74:	d900      	bls.n	8000f78 <__ssputs_r+0x70>
 8000f76:	463e      	mov	r6, r7
 8000f78:	6820      	ldr	r0, [r4, #0]
 8000f7a:	4632      	mov	r2, r6
 8000f7c:	4641      	mov	r1, r8
 8000f7e:	f000 fb86 	bl	800168e <memmove>
 8000f82:	68a3      	ldr	r3, [r4, #8]
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	60a3      	str	r3, [r4, #8]
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	4433      	add	r3, r6
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	2000      	movs	r0, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	462a      	mov	r2, r5
 8000f96:	f000 fb4b 	bl	8001630 <_realloc_r>
 8000f9a:	4606      	mov	r6, r0
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d1e0      	bne.n	8000f62 <__ssputs_r+0x5a>
 8000fa0:	6921      	ldr	r1, [r4, #16]
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	f000 fbac 	bl	8001700 <_free_r>
 8000fa8:	230c      	movs	r3, #12
 8000faa:	f8ca 3000 	str.w	r3, [sl]
 8000fae:	89a3      	ldrh	r3, [r4, #12]
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	81a3      	strh	r3, [r4, #12]
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fba:	e7e9      	b.n	8000f90 <__ssputs_r+0x88>

08000fbc <_svfiprintf_r>:
 8000fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc0:	4698      	mov	r8, r3
 8000fc2:	898b      	ldrh	r3, [r1, #12]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	b09d      	sub	sp, #116	; 0x74
 8000fc8:	4607      	mov	r7, r0
 8000fca:	460d      	mov	r5, r1
 8000fcc:	4614      	mov	r4, r2
 8000fce:	d50e      	bpl.n	8000fee <_svfiprintf_r+0x32>
 8000fd0:	690b      	ldr	r3, [r1, #16]
 8000fd2:	b963      	cbnz	r3, 8000fee <_svfiprintf_r+0x32>
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	f000 f90f 	bl	80011f8 <_malloc_r>
 8000fda:	6028      	str	r0, [r5, #0]
 8000fdc:	6128      	str	r0, [r5, #16]
 8000fde:	b920      	cbnz	r0, 8000fea <_svfiprintf_r+0x2e>
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe8:	e0d0      	b.n	800118c <_svfiprintf_r+0x1d0>
 8000fea:	2340      	movs	r3, #64	; 0x40
 8000fec:	616b      	str	r3, [r5, #20]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ffc:	2330      	movs	r3, #48	; 0x30
 8000ffe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80011a4 <_svfiprintf_r+0x1e8>
 8001002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001006:	f04f 0901 	mov.w	r9, #1
 800100a:	4623      	mov	r3, r4
 800100c:	469a      	mov	sl, r3
 800100e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001012:	b10a      	cbz	r2, 8001018 <_svfiprintf_r+0x5c>
 8001014:	2a25      	cmp	r2, #37	; 0x25
 8001016:	d1f9      	bne.n	800100c <_svfiprintf_r+0x50>
 8001018:	ebba 0b04 	subs.w	fp, sl, r4
 800101c:	d00b      	beq.n	8001036 <_svfiprintf_r+0x7a>
 800101e:	465b      	mov	r3, fp
 8001020:	4622      	mov	r2, r4
 8001022:	4629      	mov	r1, r5
 8001024:	4638      	mov	r0, r7
 8001026:	f7ff ff6f 	bl	8000f08 <__ssputs_r>
 800102a:	3001      	adds	r0, #1
 800102c:	f000 80a9 	beq.w	8001182 <_svfiprintf_r+0x1c6>
 8001030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001032:	445a      	add	r2, fp
 8001034:	9209      	str	r2, [sp, #36]	; 0x24
 8001036:	f89a 3000 	ldrb.w	r3, [sl]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80a1 	beq.w	8001182 <_svfiprintf_r+0x1c6>
 8001040:	2300      	movs	r3, #0
 8001042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800104a:	f10a 0a01 	add.w	sl, sl, #1
 800104e:	9304      	str	r3, [sp, #16]
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001056:	931a      	str	r3, [sp, #104]	; 0x68
 8001058:	4654      	mov	r4, sl
 800105a:	2205      	movs	r2, #5
 800105c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001060:	4850      	ldr	r0, [pc, #320]	; (80011a4 <_svfiprintf_r+0x1e8>)
 8001062:	f7ff f8b5 	bl	80001d0 <memchr>
 8001066:	9a04      	ldr	r2, [sp, #16]
 8001068:	b9d8      	cbnz	r0, 80010a2 <_svfiprintf_r+0xe6>
 800106a:	06d0      	lsls	r0, r2, #27
 800106c:	bf44      	itt	mi
 800106e:	2320      	movmi	r3, #32
 8001070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001074:	0711      	lsls	r1, r2, #28
 8001076:	bf44      	itt	mi
 8001078:	232b      	movmi	r3, #43	; 0x2b
 800107a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800107e:	f89a 3000 	ldrb.w	r3, [sl]
 8001082:	2b2a      	cmp	r3, #42	; 0x2a
 8001084:	d015      	beq.n	80010b2 <_svfiprintf_r+0xf6>
 8001086:	9a07      	ldr	r2, [sp, #28]
 8001088:	4654      	mov	r4, sl
 800108a:	2000      	movs	r0, #0
 800108c:	f04f 0c0a 	mov.w	ip, #10
 8001090:	4621      	mov	r1, r4
 8001092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001096:	3b30      	subs	r3, #48	; 0x30
 8001098:	2b09      	cmp	r3, #9
 800109a:	d94d      	bls.n	8001138 <_svfiprintf_r+0x17c>
 800109c:	b1b0      	cbz	r0, 80010cc <_svfiprintf_r+0x110>
 800109e:	9207      	str	r2, [sp, #28]
 80010a0:	e014      	b.n	80010cc <_svfiprintf_r+0x110>
 80010a2:	eba0 0308 	sub.w	r3, r0, r8
 80010a6:	fa09 f303 	lsl.w	r3, r9, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	9304      	str	r3, [sp, #16]
 80010ae:	46a2      	mov	sl, r4
 80010b0:	e7d2      	b.n	8001058 <_svfiprintf_r+0x9c>
 80010b2:	9b03      	ldr	r3, [sp, #12]
 80010b4:	1d19      	adds	r1, r3, #4
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	9103      	str	r1, [sp, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfbb      	ittet	lt
 80010be:	425b      	neglt	r3, r3
 80010c0:	f042 0202 	orrlt.w	r2, r2, #2
 80010c4:	9307      	strge	r3, [sp, #28]
 80010c6:	9307      	strlt	r3, [sp, #28]
 80010c8:	bfb8      	it	lt
 80010ca:	9204      	strlt	r2, [sp, #16]
 80010cc:	7823      	ldrb	r3, [r4, #0]
 80010ce:	2b2e      	cmp	r3, #46	; 0x2e
 80010d0:	d10c      	bne.n	80010ec <_svfiprintf_r+0x130>
 80010d2:	7863      	ldrb	r3, [r4, #1]
 80010d4:	2b2a      	cmp	r3, #42	; 0x2a
 80010d6:	d134      	bne.n	8001142 <_svfiprintf_r+0x186>
 80010d8:	9b03      	ldr	r3, [sp, #12]
 80010da:	1d1a      	adds	r2, r3, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	9203      	str	r2, [sp, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bfb8      	it	lt
 80010e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80010e8:	3402      	adds	r4, #2
 80010ea:	9305      	str	r3, [sp, #20]
 80010ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80011b4 <_svfiprintf_r+0x1f8>
 80010f0:	7821      	ldrb	r1, [r4, #0]
 80010f2:	2203      	movs	r2, #3
 80010f4:	4650      	mov	r0, sl
 80010f6:	f7ff f86b 	bl	80001d0 <memchr>
 80010fa:	b138      	cbz	r0, 800110c <_svfiprintf_r+0x150>
 80010fc:	9b04      	ldr	r3, [sp, #16]
 80010fe:	eba0 000a 	sub.w	r0, r0, sl
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	4082      	lsls	r2, r0
 8001106:	4313      	orrs	r3, r2
 8001108:	3401      	adds	r4, #1
 800110a:	9304      	str	r3, [sp, #16]
 800110c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001110:	4825      	ldr	r0, [pc, #148]	; (80011a8 <_svfiprintf_r+0x1ec>)
 8001112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001116:	2206      	movs	r2, #6
 8001118:	f7ff f85a 	bl	80001d0 <memchr>
 800111c:	2800      	cmp	r0, #0
 800111e:	d038      	beq.n	8001192 <_svfiprintf_r+0x1d6>
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <_svfiprintf_r+0x1f0>)
 8001122:	bb1b      	cbnz	r3, 800116c <_svfiprintf_r+0x1b0>
 8001124:	9b03      	ldr	r3, [sp, #12]
 8001126:	3307      	adds	r3, #7
 8001128:	f023 0307 	bic.w	r3, r3, #7
 800112c:	3308      	adds	r3, #8
 800112e:	9303      	str	r3, [sp, #12]
 8001130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001132:	4433      	add	r3, r6
 8001134:	9309      	str	r3, [sp, #36]	; 0x24
 8001136:	e768      	b.n	800100a <_svfiprintf_r+0x4e>
 8001138:	fb0c 3202 	mla	r2, ip, r2, r3
 800113c:	460c      	mov	r4, r1
 800113e:	2001      	movs	r0, #1
 8001140:	e7a6      	b.n	8001090 <_svfiprintf_r+0xd4>
 8001142:	2300      	movs	r3, #0
 8001144:	3401      	adds	r4, #1
 8001146:	9305      	str	r3, [sp, #20]
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 0c0a 	mov.w	ip, #10
 800114e:	4620      	mov	r0, r4
 8001150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001154:	3a30      	subs	r2, #48	; 0x30
 8001156:	2a09      	cmp	r2, #9
 8001158:	d903      	bls.n	8001162 <_svfiprintf_r+0x1a6>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0c6      	beq.n	80010ec <_svfiprintf_r+0x130>
 800115e:	9105      	str	r1, [sp, #20]
 8001160:	e7c4      	b.n	80010ec <_svfiprintf_r+0x130>
 8001162:	fb0c 2101 	mla	r1, ip, r1, r2
 8001166:	4604      	mov	r4, r0
 8001168:	2301      	movs	r3, #1
 800116a:	e7f0      	b.n	800114e <_svfiprintf_r+0x192>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	462a      	mov	r2, r5
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <_svfiprintf_r+0x1f4>)
 8001174:	a904      	add	r1, sp, #16
 8001176:	4638      	mov	r0, r7
 8001178:	f3af 8000 	nop.w
 800117c:	1c42      	adds	r2, r0, #1
 800117e:	4606      	mov	r6, r0
 8001180:	d1d6      	bne.n	8001130 <_svfiprintf_r+0x174>
 8001182:	89ab      	ldrh	r3, [r5, #12]
 8001184:	065b      	lsls	r3, r3, #25
 8001186:	f53f af2d 	bmi.w	8000fe4 <_svfiprintf_r+0x28>
 800118a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800118c:	b01d      	add	sp, #116	; 0x74
 800118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001192:	ab03      	add	r3, sp, #12
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	462a      	mov	r2, r5
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <_svfiprintf_r+0x1f4>)
 800119a:	a904      	add	r1, sp, #16
 800119c:	4638      	mov	r0, r7
 800119e:	f000 f919 	bl	80013d4 <_printf_i>
 80011a2:	e7eb      	b.n	800117c <_svfiprintf_r+0x1c0>
 80011a4:	0800180a 	.word	0x0800180a
 80011a8:	08001814 	.word	0x08001814
 80011ac:	00000000 	.word	0x00000000
 80011b0:	08000f09 	.word	0x08000f09
 80011b4:	08001810 	.word	0x08001810

080011b8 <sbrk_aligned>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	4e0e      	ldr	r6, [pc, #56]	; (80011f4 <sbrk_aligned+0x3c>)
 80011bc:	460c      	mov	r4, r1
 80011be:	6831      	ldr	r1, [r6, #0]
 80011c0:	4605      	mov	r5, r0
 80011c2:	b911      	cbnz	r1, 80011ca <sbrk_aligned+0x12>
 80011c4:	f000 fa7e 	bl	80016c4 <_sbrk_r>
 80011c8:	6030      	str	r0, [r6, #0]
 80011ca:	4621      	mov	r1, r4
 80011cc:	4628      	mov	r0, r5
 80011ce:	f000 fa79 	bl	80016c4 <_sbrk_r>
 80011d2:	1c43      	adds	r3, r0, #1
 80011d4:	d00a      	beq.n	80011ec <sbrk_aligned+0x34>
 80011d6:	1cc4      	adds	r4, r0, #3
 80011d8:	f024 0403 	bic.w	r4, r4, #3
 80011dc:	42a0      	cmp	r0, r4
 80011de:	d007      	beq.n	80011f0 <sbrk_aligned+0x38>
 80011e0:	1a21      	subs	r1, r4, r0
 80011e2:	4628      	mov	r0, r5
 80011e4:	f000 fa6e 	bl	80016c4 <_sbrk_r>
 80011e8:	3001      	adds	r0, #1
 80011ea:	d101      	bne.n	80011f0 <sbrk_aligned+0x38>
 80011ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80011f0:	4620      	mov	r0, r4
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
 80011f4:	200001c4 	.word	0x200001c4

080011f8 <_malloc_r>:
 80011f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011fc:	1ccd      	adds	r5, r1, #3
 80011fe:	f025 0503 	bic.w	r5, r5, #3
 8001202:	3508      	adds	r5, #8
 8001204:	2d0c      	cmp	r5, #12
 8001206:	bf38      	it	cc
 8001208:	250c      	movcc	r5, #12
 800120a:	2d00      	cmp	r5, #0
 800120c:	4607      	mov	r7, r0
 800120e:	db01      	blt.n	8001214 <_malloc_r+0x1c>
 8001210:	42a9      	cmp	r1, r5
 8001212:	d905      	bls.n	8001220 <_malloc_r+0x28>
 8001214:	230c      	movs	r3, #12
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	2600      	movs	r6, #0
 800121a:	4630      	mov	r0, r6
 800121c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001220:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80012f4 <_malloc_r+0xfc>
 8001224:	f000 f9f8 	bl	8001618 <__malloc_lock>
 8001228:	f8d8 3000 	ldr.w	r3, [r8]
 800122c:	461c      	mov	r4, r3
 800122e:	bb5c      	cbnz	r4, 8001288 <_malloc_r+0x90>
 8001230:	4629      	mov	r1, r5
 8001232:	4638      	mov	r0, r7
 8001234:	f7ff ffc0 	bl	80011b8 <sbrk_aligned>
 8001238:	1c43      	adds	r3, r0, #1
 800123a:	4604      	mov	r4, r0
 800123c:	d155      	bne.n	80012ea <_malloc_r+0xf2>
 800123e:	f8d8 4000 	ldr.w	r4, [r8]
 8001242:	4626      	mov	r6, r4
 8001244:	2e00      	cmp	r6, #0
 8001246:	d145      	bne.n	80012d4 <_malloc_r+0xdc>
 8001248:	2c00      	cmp	r4, #0
 800124a:	d048      	beq.n	80012de <_malloc_r+0xe6>
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	4631      	mov	r1, r6
 8001250:	4638      	mov	r0, r7
 8001252:	eb04 0903 	add.w	r9, r4, r3
 8001256:	f000 fa35 	bl	80016c4 <_sbrk_r>
 800125a:	4581      	cmp	r9, r0
 800125c:	d13f      	bne.n	80012de <_malloc_r+0xe6>
 800125e:	6821      	ldr	r1, [r4, #0]
 8001260:	1a6d      	subs	r5, r5, r1
 8001262:	4629      	mov	r1, r5
 8001264:	4638      	mov	r0, r7
 8001266:	f7ff ffa7 	bl	80011b8 <sbrk_aligned>
 800126a:	3001      	adds	r0, #1
 800126c:	d037      	beq.n	80012de <_malloc_r+0xe6>
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	442b      	add	r3, r5
 8001272:	6023      	str	r3, [r4, #0]
 8001274:	f8d8 3000 	ldr.w	r3, [r8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d038      	beq.n	80012ee <_malloc_r+0xf6>
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	42a2      	cmp	r2, r4
 8001280:	d12b      	bne.n	80012da <_malloc_r+0xe2>
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	e00f      	b.n	80012a8 <_malloc_r+0xb0>
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	1b52      	subs	r2, r2, r5
 800128c:	d41f      	bmi.n	80012ce <_malloc_r+0xd6>
 800128e:	2a0b      	cmp	r2, #11
 8001290:	d917      	bls.n	80012c2 <_malloc_r+0xca>
 8001292:	1961      	adds	r1, r4, r5
 8001294:	42a3      	cmp	r3, r4
 8001296:	6025      	str	r5, [r4, #0]
 8001298:	bf18      	it	ne
 800129a:	6059      	strne	r1, [r3, #4]
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	bf08      	it	eq
 80012a0:	f8c8 1000 	streq.w	r1, [r8]
 80012a4:	5162      	str	r2, [r4, r5]
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	4638      	mov	r0, r7
 80012aa:	f104 060b 	add.w	r6, r4, #11
 80012ae:	f000 f9b9 	bl	8001624 <__malloc_unlock>
 80012b2:	f026 0607 	bic.w	r6, r6, #7
 80012b6:	1d23      	adds	r3, r4, #4
 80012b8:	1af2      	subs	r2, r6, r3
 80012ba:	d0ae      	beq.n	800121a <_malloc_r+0x22>
 80012bc:	1b9b      	subs	r3, r3, r6
 80012be:	50a3      	str	r3, [r4, r2]
 80012c0:	e7ab      	b.n	800121a <_malloc_r+0x22>
 80012c2:	42a3      	cmp	r3, r4
 80012c4:	6862      	ldr	r2, [r4, #4]
 80012c6:	d1dd      	bne.n	8001284 <_malloc_r+0x8c>
 80012c8:	f8c8 2000 	str.w	r2, [r8]
 80012cc:	e7ec      	b.n	80012a8 <_malloc_r+0xb0>
 80012ce:	4623      	mov	r3, r4
 80012d0:	6864      	ldr	r4, [r4, #4]
 80012d2:	e7ac      	b.n	800122e <_malloc_r+0x36>
 80012d4:	4634      	mov	r4, r6
 80012d6:	6876      	ldr	r6, [r6, #4]
 80012d8:	e7b4      	b.n	8001244 <_malloc_r+0x4c>
 80012da:	4613      	mov	r3, r2
 80012dc:	e7cc      	b.n	8001278 <_malloc_r+0x80>
 80012de:	230c      	movs	r3, #12
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4638      	mov	r0, r7
 80012e4:	f000 f99e 	bl	8001624 <__malloc_unlock>
 80012e8:	e797      	b.n	800121a <_malloc_r+0x22>
 80012ea:	6025      	str	r5, [r4, #0]
 80012ec:	e7dc      	b.n	80012a8 <_malloc_r+0xb0>
 80012ee:	605b      	str	r3, [r3, #4]
 80012f0:	deff      	udf	#255	; 0xff
 80012f2:	bf00      	nop
 80012f4:	200001c0 	.word	0x200001c0

080012f8 <_printf_common>:
 80012f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012fc:	4616      	mov	r6, r2
 80012fe:	4699      	mov	r9, r3
 8001300:	688a      	ldr	r2, [r1, #8]
 8001302:	690b      	ldr	r3, [r1, #16]
 8001304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001308:	4293      	cmp	r3, r2
 800130a:	bfb8      	it	lt
 800130c:	4613      	movlt	r3, r2
 800130e:	6033      	str	r3, [r6, #0]
 8001310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001314:	4607      	mov	r7, r0
 8001316:	460c      	mov	r4, r1
 8001318:	b10a      	cbz	r2, 800131e <_printf_common+0x26>
 800131a:	3301      	adds	r3, #1
 800131c:	6033      	str	r3, [r6, #0]
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	0699      	lsls	r1, r3, #26
 8001322:	bf42      	ittt	mi
 8001324:	6833      	ldrmi	r3, [r6, #0]
 8001326:	3302      	addmi	r3, #2
 8001328:	6033      	strmi	r3, [r6, #0]
 800132a:	6825      	ldr	r5, [r4, #0]
 800132c:	f015 0506 	ands.w	r5, r5, #6
 8001330:	d106      	bne.n	8001340 <_printf_common+0x48>
 8001332:	f104 0a19 	add.w	sl, r4, #25
 8001336:	68e3      	ldr	r3, [r4, #12]
 8001338:	6832      	ldr	r2, [r6, #0]
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	42ab      	cmp	r3, r5
 800133e:	dc26      	bgt.n	800138e <_printf_common+0x96>
 8001340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001344:	1e13      	subs	r3, r2, #0
 8001346:	6822      	ldr	r2, [r4, #0]
 8001348:	bf18      	it	ne
 800134a:	2301      	movne	r3, #1
 800134c:	0692      	lsls	r2, r2, #26
 800134e:	d42b      	bmi.n	80013a8 <_printf_common+0xb0>
 8001350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001354:	4649      	mov	r1, r9
 8001356:	4638      	mov	r0, r7
 8001358:	47c0      	blx	r8
 800135a:	3001      	adds	r0, #1
 800135c:	d01e      	beq.n	800139c <_printf_common+0xa4>
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	6922      	ldr	r2, [r4, #16]
 8001362:	f003 0306 	and.w	r3, r3, #6
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf02      	ittt	eq
 800136a:	68e5      	ldreq	r5, [r4, #12]
 800136c:	6833      	ldreq	r3, [r6, #0]
 800136e:	1aed      	subeq	r5, r5, r3
 8001370:	68a3      	ldr	r3, [r4, #8]
 8001372:	bf0c      	ite	eq
 8001374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001378:	2500      	movne	r5, #0
 800137a:	4293      	cmp	r3, r2
 800137c:	bfc4      	itt	gt
 800137e:	1a9b      	subgt	r3, r3, r2
 8001380:	18ed      	addgt	r5, r5, r3
 8001382:	2600      	movs	r6, #0
 8001384:	341a      	adds	r4, #26
 8001386:	42b5      	cmp	r5, r6
 8001388:	d11a      	bne.n	80013c0 <_printf_common+0xc8>
 800138a:	2000      	movs	r0, #0
 800138c:	e008      	b.n	80013a0 <_printf_common+0xa8>
 800138e:	2301      	movs	r3, #1
 8001390:	4652      	mov	r2, sl
 8001392:	4649      	mov	r1, r9
 8001394:	4638      	mov	r0, r7
 8001396:	47c0      	blx	r8
 8001398:	3001      	adds	r0, #1
 800139a:	d103      	bne.n	80013a4 <_printf_common+0xac>
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a4:	3501      	adds	r5, #1
 80013a6:	e7c6      	b.n	8001336 <_printf_common+0x3e>
 80013a8:	18e1      	adds	r1, r4, r3
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	2030      	movs	r0, #48	; 0x30
 80013ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013b2:	4422      	add	r2, r4
 80013b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013bc:	3302      	adds	r3, #2
 80013be:	e7c7      	b.n	8001350 <_printf_common+0x58>
 80013c0:	2301      	movs	r3, #1
 80013c2:	4622      	mov	r2, r4
 80013c4:	4649      	mov	r1, r9
 80013c6:	4638      	mov	r0, r7
 80013c8:	47c0      	blx	r8
 80013ca:	3001      	adds	r0, #1
 80013cc:	d0e6      	beq.n	800139c <_printf_common+0xa4>
 80013ce:	3601      	adds	r6, #1
 80013d0:	e7d9      	b.n	8001386 <_printf_common+0x8e>
	...

080013d4 <_printf_i>:
 80013d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013d8:	7e0f      	ldrb	r7, [r1, #24]
 80013da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013dc:	2f78      	cmp	r7, #120	; 0x78
 80013de:	4691      	mov	r9, r2
 80013e0:	4680      	mov	r8, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	469a      	mov	sl, r3
 80013e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013ea:	d807      	bhi.n	80013fc <_printf_i+0x28>
 80013ec:	2f62      	cmp	r7, #98	; 0x62
 80013ee:	d80a      	bhi.n	8001406 <_printf_i+0x32>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	f000 80d4 	beq.w	800159e <_printf_i+0x1ca>
 80013f6:	2f58      	cmp	r7, #88	; 0x58
 80013f8:	f000 80c0 	beq.w	800157c <_printf_i+0x1a8>
 80013fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001404:	e03a      	b.n	800147c <_printf_i+0xa8>
 8001406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800140a:	2b15      	cmp	r3, #21
 800140c:	d8f6      	bhi.n	80013fc <_printf_i+0x28>
 800140e:	a101      	add	r1, pc, #4	; (adr r1, 8001414 <_printf_i+0x40>)
 8001410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001414:	0800146d 	.word	0x0800146d
 8001418:	08001481 	.word	0x08001481
 800141c:	080013fd 	.word	0x080013fd
 8001420:	080013fd 	.word	0x080013fd
 8001424:	080013fd 	.word	0x080013fd
 8001428:	080013fd 	.word	0x080013fd
 800142c:	08001481 	.word	0x08001481
 8001430:	080013fd 	.word	0x080013fd
 8001434:	080013fd 	.word	0x080013fd
 8001438:	080013fd 	.word	0x080013fd
 800143c:	080013fd 	.word	0x080013fd
 8001440:	08001585 	.word	0x08001585
 8001444:	080014ad 	.word	0x080014ad
 8001448:	0800153f 	.word	0x0800153f
 800144c:	080013fd 	.word	0x080013fd
 8001450:	080013fd 	.word	0x080013fd
 8001454:	080015a7 	.word	0x080015a7
 8001458:	080013fd 	.word	0x080013fd
 800145c:	080014ad 	.word	0x080014ad
 8001460:	080013fd 	.word	0x080013fd
 8001464:	080013fd 	.word	0x080013fd
 8001468:	08001547 	.word	0x08001547
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	602a      	str	r2, [r5, #0]
 8001474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800147c:	2301      	movs	r3, #1
 800147e:	e09f      	b.n	80015c0 <_printf_i+0x1ec>
 8001480:	6820      	ldr	r0, [r4, #0]
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	0607      	lsls	r7, r0, #24
 8001486:	f103 0104 	add.w	r1, r3, #4
 800148a:	6029      	str	r1, [r5, #0]
 800148c:	d501      	bpl.n	8001492 <_printf_i+0xbe>
 800148e:	681e      	ldr	r6, [r3, #0]
 8001490:	e003      	b.n	800149a <_printf_i+0xc6>
 8001492:	0646      	lsls	r6, r0, #25
 8001494:	d5fb      	bpl.n	800148e <_printf_i+0xba>
 8001496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800149a:	2e00      	cmp	r6, #0
 800149c:	da03      	bge.n	80014a6 <_printf_i+0xd2>
 800149e:	232d      	movs	r3, #45	; 0x2d
 80014a0:	4276      	negs	r6, r6
 80014a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014a6:	485a      	ldr	r0, [pc, #360]	; (8001610 <_printf_i+0x23c>)
 80014a8:	230a      	movs	r3, #10
 80014aa:	e012      	b.n	80014d2 <_printf_i+0xfe>
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	1d19      	adds	r1, r3, #4
 80014b2:	6029      	str	r1, [r5, #0]
 80014b4:	0605      	lsls	r5, r0, #24
 80014b6:	d501      	bpl.n	80014bc <_printf_i+0xe8>
 80014b8:	681e      	ldr	r6, [r3, #0]
 80014ba:	e002      	b.n	80014c2 <_printf_i+0xee>
 80014bc:	0641      	lsls	r1, r0, #25
 80014be:	d5fb      	bpl.n	80014b8 <_printf_i+0xe4>
 80014c0:	881e      	ldrh	r6, [r3, #0]
 80014c2:	4853      	ldr	r0, [pc, #332]	; (8001610 <_printf_i+0x23c>)
 80014c4:	2f6f      	cmp	r7, #111	; 0x6f
 80014c6:	bf0c      	ite	eq
 80014c8:	2308      	moveq	r3, #8
 80014ca:	230a      	movne	r3, #10
 80014cc:	2100      	movs	r1, #0
 80014ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014d2:	6865      	ldr	r5, [r4, #4]
 80014d4:	60a5      	str	r5, [r4, #8]
 80014d6:	2d00      	cmp	r5, #0
 80014d8:	bfa2      	ittt	ge
 80014da:	6821      	ldrge	r1, [r4, #0]
 80014dc:	f021 0104 	bicge.w	r1, r1, #4
 80014e0:	6021      	strge	r1, [r4, #0]
 80014e2:	b90e      	cbnz	r6, 80014e8 <_printf_i+0x114>
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d04b      	beq.n	8001580 <_printf_i+0x1ac>
 80014e8:	4615      	mov	r5, r2
 80014ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80014ee:	fb03 6711 	mls	r7, r3, r1, r6
 80014f2:	5dc7      	ldrb	r7, [r0, r7]
 80014f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014f8:	4637      	mov	r7, r6
 80014fa:	42bb      	cmp	r3, r7
 80014fc:	460e      	mov	r6, r1
 80014fe:	d9f4      	bls.n	80014ea <_printf_i+0x116>
 8001500:	2b08      	cmp	r3, #8
 8001502:	d10b      	bne.n	800151c <_printf_i+0x148>
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	07de      	lsls	r6, r3, #31
 8001508:	d508      	bpl.n	800151c <_printf_i+0x148>
 800150a:	6923      	ldr	r3, [r4, #16]
 800150c:	6861      	ldr	r1, [r4, #4]
 800150e:	4299      	cmp	r1, r3
 8001510:	bfde      	ittt	le
 8001512:	2330      	movle	r3, #48	; 0x30
 8001514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001518:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800151c:	1b52      	subs	r2, r2, r5
 800151e:	6122      	str	r2, [r4, #16]
 8001520:	f8cd a000 	str.w	sl, [sp]
 8001524:	464b      	mov	r3, r9
 8001526:	aa03      	add	r2, sp, #12
 8001528:	4621      	mov	r1, r4
 800152a:	4640      	mov	r0, r8
 800152c:	f7ff fee4 	bl	80012f8 <_printf_common>
 8001530:	3001      	adds	r0, #1
 8001532:	d14a      	bne.n	80015ca <_printf_i+0x1f6>
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001538:	b004      	add	sp, #16
 800153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	4833      	ldr	r0, [pc, #204]	; (8001614 <_printf_i+0x240>)
 8001548:	2778      	movs	r7, #120	; 0x78
 800154a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	6829      	ldr	r1, [r5, #0]
 8001552:	061f      	lsls	r7, r3, #24
 8001554:	f851 6b04 	ldr.w	r6, [r1], #4
 8001558:	d402      	bmi.n	8001560 <_printf_i+0x18c>
 800155a:	065f      	lsls	r7, r3, #25
 800155c:	bf48      	it	mi
 800155e:	b2b6      	uxthmi	r6, r6
 8001560:	07df      	lsls	r7, r3, #31
 8001562:	bf48      	it	mi
 8001564:	f043 0320 	orrmi.w	r3, r3, #32
 8001568:	6029      	str	r1, [r5, #0]
 800156a:	bf48      	it	mi
 800156c:	6023      	strmi	r3, [r4, #0]
 800156e:	b91e      	cbnz	r6, 8001578 <_printf_i+0x1a4>
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	f023 0320 	bic.w	r3, r3, #32
 8001576:	6023      	str	r3, [r4, #0]
 8001578:	2310      	movs	r3, #16
 800157a:	e7a7      	b.n	80014cc <_printf_i+0xf8>
 800157c:	4824      	ldr	r0, [pc, #144]	; (8001610 <_printf_i+0x23c>)
 800157e:	e7e4      	b.n	800154a <_printf_i+0x176>
 8001580:	4615      	mov	r5, r2
 8001582:	e7bd      	b.n	8001500 <_printf_i+0x12c>
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	6826      	ldr	r6, [r4, #0]
 8001588:	6961      	ldr	r1, [r4, #20]
 800158a:	1d18      	adds	r0, r3, #4
 800158c:	6028      	str	r0, [r5, #0]
 800158e:	0635      	lsls	r5, r6, #24
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	d501      	bpl.n	8001598 <_printf_i+0x1c4>
 8001594:	6019      	str	r1, [r3, #0]
 8001596:	e002      	b.n	800159e <_printf_i+0x1ca>
 8001598:	0670      	lsls	r0, r6, #25
 800159a:	d5fb      	bpl.n	8001594 <_printf_i+0x1c0>
 800159c:	8019      	strh	r1, [r3, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	6123      	str	r3, [r4, #16]
 80015a2:	4615      	mov	r5, r2
 80015a4:	e7bc      	b.n	8001520 <_printf_i+0x14c>
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	1d1a      	adds	r2, r3, #4
 80015aa:	602a      	str	r2, [r5, #0]
 80015ac:	681d      	ldr	r5, [r3, #0]
 80015ae:	6862      	ldr	r2, [r4, #4]
 80015b0:	2100      	movs	r1, #0
 80015b2:	4628      	mov	r0, r5
 80015b4:	f7fe fe0c 	bl	80001d0 <memchr>
 80015b8:	b108      	cbz	r0, 80015be <_printf_i+0x1ea>
 80015ba:	1b40      	subs	r0, r0, r5
 80015bc:	6060      	str	r0, [r4, #4]
 80015be:	6863      	ldr	r3, [r4, #4]
 80015c0:	6123      	str	r3, [r4, #16]
 80015c2:	2300      	movs	r3, #0
 80015c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015c8:	e7aa      	b.n	8001520 <_printf_i+0x14c>
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	462a      	mov	r2, r5
 80015ce:	4649      	mov	r1, r9
 80015d0:	4640      	mov	r0, r8
 80015d2:	47d0      	blx	sl
 80015d4:	3001      	adds	r0, #1
 80015d6:	d0ad      	beq.n	8001534 <_printf_i+0x160>
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	079b      	lsls	r3, r3, #30
 80015dc:	d413      	bmi.n	8001606 <_printf_i+0x232>
 80015de:	68e0      	ldr	r0, [r4, #12]
 80015e0:	9b03      	ldr	r3, [sp, #12]
 80015e2:	4298      	cmp	r0, r3
 80015e4:	bfb8      	it	lt
 80015e6:	4618      	movlt	r0, r3
 80015e8:	e7a6      	b.n	8001538 <_printf_i+0x164>
 80015ea:	2301      	movs	r3, #1
 80015ec:	4632      	mov	r2, r6
 80015ee:	4649      	mov	r1, r9
 80015f0:	4640      	mov	r0, r8
 80015f2:	47d0      	blx	sl
 80015f4:	3001      	adds	r0, #1
 80015f6:	d09d      	beq.n	8001534 <_printf_i+0x160>
 80015f8:	3501      	adds	r5, #1
 80015fa:	68e3      	ldr	r3, [r4, #12]
 80015fc:	9903      	ldr	r1, [sp, #12]
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	42ab      	cmp	r3, r5
 8001602:	dcf2      	bgt.n	80015ea <_printf_i+0x216>
 8001604:	e7eb      	b.n	80015de <_printf_i+0x20a>
 8001606:	2500      	movs	r5, #0
 8001608:	f104 0619 	add.w	r6, r4, #25
 800160c:	e7f5      	b.n	80015fa <_printf_i+0x226>
 800160e:	bf00      	nop
 8001610:	0800181b 	.word	0x0800181b
 8001614:	0800182c 	.word	0x0800182c

08001618 <__malloc_lock>:
 8001618:	4801      	ldr	r0, [pc, #4]	; (8001620 <__malloc_lock+0x8>)
 800161a:	f7ff bc73 	b.w	8000f04 <__retarget_lock_acquire_recursive>
 800161e:	bf00      	nop
 8001620:	200001bc 	.word	0x200001bc

08001624 <__malloc_unlock>:
 8001624:	4801      	ldr	r0, [pc, #4]	; (800162c <__malloc_unlock+0x8>)
 8001626:	f7ff bc6e 	b.w	8000f06 <__retarget_lock_release_recursive>
 800162a:	bf00      	nop
 800162c:	200001bc 	.word	0x200001bc

08001630 <_realloc_r>:
 8001630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001634:	4680      	mov	r8, r0
 8001636:	4614      	mov	r4, r2
 8001638:	460e      	mov	r6, r1
 800163a:	b921      	cbnz	r1, 8001646 <_realloc_r+0x16>
 800163c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001640:	4611      	mov	r1, r2
 8001642:	f7ff bdd9 	b.w	80011f8 <_malloc_r>
 8001646:	b92a      	cbnz	r2, 8001654 <_realloc_r+0x24>
 8001648:	f000 f85a 	bl	8001700 <_free_r>
 800164c:	4625      	mov	r5, r4
 800164e:	4628      	mov	r0, r5
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001654:	f000 f8a0 	bl	8001798 <_malloc_usable_size_r>
 8001658:	4284      	cmp	r4, r0
 800165a:	4607      	mov	r7, r0
 800165c:	d802      	bhi.n	8001664 <_realloc_r+0x34>
 800165e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001662:	d812      	bhi.n	800168a <_realloc_r+0x5a>
 8001664:	4621      	mov	r1, r4
 8001666:	4640      	mov	r0, r8
 8001668:	f7ff fdc6 	bl	80011f8 <_malloc_r>
 800166c:	4605      	mov	r5, r0
 800166e:	2800      	cmp	r0, #0
 8001670:	d0ed      	beq.n	800164e <_realloc_r+0x1e>
 8001672:	42bc      	cmp	r4, r7
 8001674:	4622      	mov	r2, r4
 8001676:	4631      	mov	r1, r6
 8001678:	bf28      	it	cs
 800167a:	463a      	movcs	r2, r7
 800167c:	f000 f832 	bl	80016e4 <memcpy>
 8001680:	4631      	mov	r1, r6
 8001682:	4640      	mov	r0, r8
 8001684:	f000 f83c 	bl	8001700 <_free_r>
 8001688:	e7e1      	b.n	800164e <_realloc_r+0x1e>
 800168a:	4635      	mov	r5, r6
 800168c:	e7df      	b.n	800164e <_realloc_r+0x1e>

0800168e <memmove>:
 800168e:	4288      	cmp	r0, r1
 8001690:	b510      	push	{r4, lr}
 8001692:	eb01 0402 	add.w	r4, r1, r2
 8001696:	d902      	bls.n	800169e <memmove+0x10>
 8001698:	4284      	cmp	r4, r0
 800169a:	4623      	mov	r3, r4
 800169c:	d807      	bhi.n	80016ae <memmove+0x20>
 800169e:	1e43      	subs	r3, r0, #1
 80016a0:	42a1      	cmp	r1, r4
 80016a2:	d008      	beq.n	80016b6 <memmove+0x28>
 80016a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80016a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80016ac:	e7f8      	b.n	80016a0 <memmove+0x12>
 80016ae:	4402      	add	r2, r0
 80016b0:	4601      	mov	r1, r0
 80016b2:	428a      	cmp	r2, r1
 80016b4:	d100      	bne.n	80016b8 <memmove+0x2a>
 80016b6:	bd10      	pop	{r4, pc}
 80016b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80016c0:	e7f7      	b.n	80016b2 <memmove+0x24>
	...

080016c4 <_sbrk_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <_sbrk_r+0x1c>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	f7ff f9c2 	bl	8000a58 <_sbrk>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_sbrk_r+0x1a>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_sbrk_r+0x1a>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	200001c8 	.word	0x200001c8

080016e4 <memcpy>:
 80016e4:	440a      	add	r2, r1
 80016e6:	4291      	cmp	r1, r2
 80016e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80016ec:	d100      	bne.n	80016f0 <memcpy+0xc>
 80016ee:	4770      	bx	lr
 80016f0:	b510      	push	{r4, lr}
 80016f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016fa:	4291      	cmp	r1, r2
 80016fc:	d1f9      	bne.n	80016f2 <memcpy+0xe>
 80016fe:	bd10      	pop	{r4, pc}

08001700 <_free_r>:
 8001700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001702:	2900      	cmp	r1, #0
 8001704:	d044      	beq.n	8001790 <_free_r+0x90>
 8001706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800170a:	9001      	str	r0, [sp, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f1a1 0404 	sub.w	r4, r1, #4
 8001712:	bfb8      	it	lt
 8001714:	18e4      	addlt	r4, r4, r3
 8001716:	f7ff ff7f 	bl	8001618 <__malloc_lock>
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <_free_r+0x94>)
 800171c:	9801      	ldr	r0, [sp, #4]
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	b933      	cbnz	r3, 8001730 <_free_r+0x30>
 8001722:	6063      	str	r3, [r4, #4]
 8001724:	6014      	str	r4, [r2, #0]
 8001726:	b003      	add	sp, #12
 8001728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800172c:	f7ff bf7a 	b.w	8001624 <__malloc_unlock>
 8001730:	42a3      	cmp	r3, r4
 8001732:	d908      	bls.n	8001746 <_free_r+0x46>
 8001734:	6825      	ldr	r5, [r4, #0]
 8001736:	1961      	adds	r1, r4, r5
 8001738:	428b      	cmp	r3, r1
 800173a:	bf01      	itttt	eq
 800173c:	6819      	ldreq	r1, [r3, #0]
 800173e:	685b      	ldreq	r3, [r3, #4]
 8001740:	1949      	addeq	r1, r1, r5
 8001742:	6021      	streq	r1, [r4, #0]
 8001744:	e7ed      	b.n	8001722 <_free_r+0x22>
 8001746:	461a      	mov	r2, r3
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	b10b      	cbz	r3, 8001750 <_free_r+0x50>
 800174c:	42a3      	cmp	r3, r4
 800174e:	d9fa      	bls.n	8001746 <_free_r+0x46>
 8001750:	6811      	ldr	r1, [r2, #0]
 8001752:	1855      	adds	r5, r2, r1
 8001754:	42a5      	cmp	r5, r4
 8001756:	d10b      	bne.n	8001770 <_free_r+0x70>
 8001758:	6824      	ldr	r4, [r4, #0]
 800175a:	4421      	add	r1, r4
 800175c:	1854      	adds	r4, r2, r1
 800175e:	42a3      	cmp	r3, r4
 8001760:	6011      	str	r1, [r2, #0]
 8001762:	d1e0      	bne.n	8001726 <_free_r+0x26>
 8001764:	681c      	ldr	r4, [r3, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	6053      	str	r3, [r2, #4]
 800176a:	440c      	add	r4, r1
 800176c:	6014      	str	r4, [r2, #0]
 800176e:	e7da      	b.n	8001726 <_free_r+0x26>
 8001770:	d902      	bls.n	8001778 <_free_r+0x78>
 8001772:	230c      	movs	r3, #12
 8001774:	6003      	str	r3, [r0, #0]
 8001776:	e7d6      	b.n	8001726 <_free_r+0x26>
 8001778:	6825      	ldr	r5, [r4, #0]
 800177a:	1961      	adds	r1, r4, r5
 800177c:	428b      	cmp	r3, r1
 800177e:	bf04      	itt	eq
 8001780:	6819      	ldreq	r1, [r3, #0]
 8001782:	685b      	ldreq	r3, [r3, #4]
 8001784:	6063      	str	r3, [r4, #4]
 8001786:	bf04      	itt	eq
 8001788:	1949      	addeq	r1, r1, r5
 800178a:	6021      	streq	r1, [r4, #0]
 800178c:	6054      	str	r4, [r2, #4]
 800178e:	e7ca      	b.n	8001726 <_free_r+0x26>
 8001790:	b003      	add	sp, #12
 8001792:	bd30      	pop	{r4, r5, pc}
 8001794:	200001c0 	.word	0x200001c0

08001798 <_malloc_usable_size_r>:
 8001798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800179c:	1f18      	subs	r0, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bfbc      	itt	lt
 80017a2:	580b      	ldrlt	r3, [r1, r0]
 80017a4:	18c0      	addlt	r0, r0, r3
 80017a6:	4770      	bx	lr

080017a8 <_init>:
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017aa:	bf00      	nop
 80017ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ae:	bc08      	pop	{r3}
 80017b0:	469e      	mov	lr, r3
 80017b2:	4770      	bx	lr

080017b4 <_fini>:
 80017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b6:	bf00      	nop
 80017b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ba:	bc08      	pop	{r3}
 80017bc:	469e      	mov	lr, r3
 80017be:	4770      	bx	lr
